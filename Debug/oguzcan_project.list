
oguzcan_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008654  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008828  08008828  00018828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008970  08008970  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008978  08008978  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800897c  0800897c  0001897c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b2c  20000074  080089f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba0  080089f4  00024ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b207  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003646  00000000  00000000  0003b2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026788  00000000  00000000  00041220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019015  00000000  00000000  000679a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a0c  00000000  00000000  000809bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001763c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  0017641c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800880c 	.word	0x0800880c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800880c 	.word	0x0800880c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_ldivmod>:
 8000b88:	b97b      	cbnz	r3, 8000baa <__aeabi_ldivmod+0x22>
 8000b8a:	b972      	cbnz	r2, 8000baa <__aeabi_ldivmod+0x22>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bfbe      	ittt	lt
 8000b90:	2000      	movlt	r0, #0
 8000b92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b96:	e006      	blt.n	8000ba6 <__aeabi_ldivmod+0x1e>
 8000b98:	bf08      	it	eq
 8000b9a:	2800      	cmpeq	r0, #0
 8000b9c:	bf1c      	itt	ne
 8000b9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba6:	f000 b9bf 	b.w	8000f28 <__aeabi_idiv0>
 8000baa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	db09      	blt.n	8000bca <__aeabi_ldivmod+0x42>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db1a      	blt.n	8000bf0 <__aeabi_ldivmod+0x68>
 8000bba:	f000 f84d 	bl	8000c58 <__udivmoddi4>
 8000bbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc6:	b004      	add	sp, #16
 8000bc8:	4770      	bx	lr
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db1b      	blt.n	8000c0c <__aeabi_ldivmod+0x84>
 8000bd4:	f000 f840 	bl	8000c58 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	4252      	negs	r2, r2
 8000bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f82f 	bl	8000c58 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4240      	negs	r0, r0
 8000c06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0a:	4770      	bx	lr
 8000c0c:	4252      	negs	r2, r2
 8000c0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c12:	f000 f821 	bl	8000c58 <__udivmoddi4>
 8000c16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1e:	b004      	add	sp, #16
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2203      	movs	r2, #3
 8000f38:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2203      	movs	r2, #3
 8000f56:	715a      	strb	r2, [r3, #5]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f7e:	7afb      	ldrb	r3, [r7, #11]
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	8af9      	ldrh	r1, [r7, #22]
 8000f84:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	f001 fe0b 	bl	8002bb0 <HAL_I2C_Mem_Read>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10b      	bne.n	8000fb8 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fa0:	7d7b      	ldrb	r3, [r7, #21]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7d3b      	ldrb	r3, [r7, #20]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	801a      	strh	r2, [r3, #0]
		return true;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <read_register16+0x56>
	} else
		return false;
 8000fb8:	2300      	movs	r3, #0

}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b08b      	sub	sp, #44	; 0x2c
 8000fc6:	af04      	add	r7, sp, #16
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	72fb      	strb	r3, [r7, #11]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fe2:	7afb      	ldrb	r3, [r7, #11]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	7abb      	ldrb	r3, [r7, #10]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	8af9      	ldrh	r1, [r7, #22]
 8000fec:	f241 3488 	movw	r4, #5000	; 0x1388
 8000ff0:	9402      	str	r4, [sp, #8]
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f001 fdd9 	bl	8002bb0 <HAL_I2C_Mem_Read>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <read_data+0x46>
		return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e000      	b.n	800100a <read_data+0x48>
	else
		return 1;
 8001008:	2301      	movs	r3, #1

}
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}

08001012 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	2188      	movs	r1, #136	; 0x88
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff9f 	bl	8000f64 <read_register16>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d06f      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	461a      	mov	r2, r3
 8001032:	218a      	movs	r1, #138	; 0x8a
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff95 	bl	8000f64 <read_register16>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d065      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3304      	adds	r3, #4
 8001044:	461a      	mov	r2, r3
 8001046:	218c      	movs	r1, #140	; 0x8c
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff8b 	bl	8000f64 <read_register16>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d05b      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3306      	adds	r3, #6
 8001058:	461a      	mov	r2, r3
 800105a:	218e      	movs	r1, #142	; 0x8e
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff81 	bl	8000f64 <read_register16>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d051      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3308      	adds	r3, #8
 800106c:	461a      	mov	r2, r3
 800106e:	2190      	movs	r1, #144	; 0x90
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff77 	bl	8000f64 <read_register16>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d047      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330a      	adds	r3, #10
 8001080:	461a      	mov	r2, r3
 8001082:	2192      	movs	r1, #146	; 0x92
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff6d 	bl	8000f64 <read_register16>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d03d      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	330c      	adds	r3, #12
 8001094:	461a      	mov	r2, r3
 8001096:	2194      	movs	r1, #148	; 0x94
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff63 	bl	8000f64 <read_register16>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d033      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	330e      	adds	r3, #14
 80010a8:	461a      	mov	r2, r3
 80010aa:	2196      	movs	r1, #150	; 0x96
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff59 	bl	8000f64 <read_register16>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d029      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3310      	adds	r3, #16
 80010bc:	461a      	mov	r2, r3
 80010be:	2198      	movs	r1, #152	; 0x98
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff4f 	bl	8000f64 <read_register16>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01f      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3312      	adds	r3, #18
 80010d0:	461a      	mov	r2, r3
 80010d2:	219a      	movs	r1, #154	; 0x9a
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff45 	bl	8000f64 <read_register16>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d015      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3314      	adds	r3, #20
 80010e4:	461a      	mov	r2, r3
 80010e6:	219c      	movs	r1, #156	; 0x9c
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff3b 	bl	8000f64 <read_register16>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80010f8:	461a      	mov	r2, r3
 80010fa:	219e      	movs	r1, #158	; 0x9e
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff31 	bl	8000f64 <read_register16>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <read_calibration_data+0xfa>

		return true;
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <read_calibration_data+0xfc>
	}

	return false;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f103 0218 	add.w	r2, r3, #24
 8001124:	2301      	movs	r3, #1
 8001126:	21a1      	movs	r1, #161	; 0xa1
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff4a 	bl	8000fc2 <read_data>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d14b      	bne.n	80011cc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	331a      	adds	r3, #26
 8001138:	461a      	mov	r2, r3
 800113a:	21e1      	movs	r1, #225	; 0xe1
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff11 	bl	8000f64 <read_register16>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d041      	beq.n	80011cc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f103 021c 	add.w	r2, r3, #28
 800114e:	2301      	movs	r3, #1
 8001150:	21e3      	movs	r1, #227	; 0xe3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff35 	bl	8000fc2 <read_data>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d136      	bne.n	80011cc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800115e:	f107 030e 	add.w	r3, r7, #14
 8001162:	461a      	mov	r2, r3
 8001164:	21e4      	movs	r1, #228	; 0xe4
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fefc 	bl	8000f64 <read_register16>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d02c      	beq.n	80011cc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	461a      	mov	r2, r3
 8001178:	21e5      	movs	r1, #229	; 0xe5
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fef2 	bl	8000f64 <read_register16>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d022      	beq.n	80011cc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800118c:	2301      	movs	r3, #1
 800118e:	21e7      	movs	r1, #231	; 0xe7
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff16 	bl	8000fc2 <read_data>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d117      	bne.n	80011cc <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	121b      	asrs	r3, r3, #8
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80011bc:	89bb      	ldrh	r3, [r7, #12]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	841a      	strh	r2, [r3, #32]

		return true;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <read_hum_calibration_data+0xb8>
	}

	return false;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b088      	sub	sp, #32
 80011da:	af04      	add	r7, sp, #16
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	70fb      	strb	r3, [r7, #3]
 80011e2:	4613      	mov	r3, r2
 80011e4:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	89f9      	ldrh	r1, [r7, #14]
 80011f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	2301      	movs	r3, #1
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	1cbb      	adds	r3, r7, #2
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	f001 fbbe 	bl	8002988 <HAL_I2C_Mem_Write>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <write_register8+0x40>
		return false;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <write_register8+0x42>
	else
		return true;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800122e:	2b76      	cmp	r3, #118	; 0x76
 8001230:	d005      	beq.n	800123e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001236:	2b77      	cmp	r3, #119	; 0x77
 8001238:	d001      	beq.n	800123e <bmp280_init+0x1e>

		return false;
 800123a:	2300      	movs	r3, #0
 800123c:	e099      	b.n	8001372 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001244:	2301      	movs	r3, #1
 8001246:	21d0      	movs	r1, #208	; 0xd0
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff feba 	bl	8000fc2 <read_data>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <bmp280_init+0x38>
		return false;
 8001254:	2300      	movs	r3, #0
 8001256:	e08c      	b.n	8001372 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800125e:	2b58      	cmp	r3, #88	; 0x58
 8001260:	d006      	beq.n	8001270 <bmp280_init+0x50>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001268:	2b60      	cmp	r3, #96	; 0x60
 800126a:	d001      	beq.n	8001270 <bmp280_init+0x50>

		return false;
 800126c:	2300      	movs	r3, #0
 800126e:	e080      	b.n	8001372 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001270:	22b6      	movs	r2, #182	; 0xb6
 8001272:	21e0      	movs	r1, #224	; 0xe0
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffae 	bl	80011d6 <write_register8>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <bmp280_init+0x64>
		return false;
 8001280:	2300      	movs	r3, #0
 8001282:	e076      	b.n	8001372 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	2301      	movs	r3, #1
 800128a:	21f3      	movs	r1, #243	; 0xf3
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fe98 	bl	8000fc2 <read_data>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f5      	bne.n	8001284 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff feb5 	bl	8001012 <read_calibration_data>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f083 0301 	eor.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d100      	bne.n	80012b6 <bmp280_init+0x96>
 80012b4:	e001      	b.n	80012ba <bmp280_init+0x9a>
		return false;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e05b      	b.n	8001372 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012c0:	2b60      	cmp	r3, #96	; 0x60
 80012c2:	d10a      	bne.n	80012da <bmp280_init+0xba>
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff26 	bl	8001116 <read_hum_calibration_data>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <bmp280_init+0xba>
		return false;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e04b      	b.n	8001372 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	795b      	ldrb	r3, [r3, #5]
 80012de:	015b      	lsls	r3, r3, #5
 80012e0:	b25a      	sxtb	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	461a      	mov	r2, r3
 80012f4:	21f5      	movs	r1, #245	; 0xf5
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff6d 	bl	80011d6 <write_register8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <bmp280_init+0xe6>
		return false;
 8001302:	2300      	movs	r3, #0
 8001304:	e035      	b.n	8001372 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d102      	bne.n	8001314 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	78db      	ldrb	r3, [r3, #3]
 8001318:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800131a:	b25a      	sxtb	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b25a      	sxtb	r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001332:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800133a:	2b60      	cmp	r3, #96	; 0x60
 800133c:	d10d      	bne.n	800135a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	461a      	mov	r2, r3
 8001348:	21f2      	movs	r1, #242	; 0xf2
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff43 	bl	80011d6 <write_register8>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <bmp280_init+0x13a>
			return false;
 8001356:	2300      	movs	r3, #0
 8001358:	e00b      	b.n	8001372 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	461a      	mov	r2, r3
 800135e:	21f4      	movs	r1, #244	; 0xf4
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff38 	bl	80011d6 <write_register8>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <bmp280_init+0x150>
		return false;
 800136c:	2300      	movs	r3, #0
 800136e:	e000      	b.n	8001372 <bmp280_init+0x152>
	}

	return true;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800137a:	b480      	push	{r7}
 800137c:	b087      	sub	sp, #28
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	10da      	asrs	r2, r3, #3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001398:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800139c:	12db      	asrs	r3, r3, #11
 800139e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	111b      	asrs	r3, r3, #4
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	1112      	asrs	r2, r2, #4
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	8809      	ldrh	r1, [r1, #0]
 80013b2:	1a52      	subs	r2, r2, r1
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013c4:	139b      	asrs	r3, r3, #14
 80013c6:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	441a      	add	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3380      	adds	r3, #128	; 0x80
 80013de:	121b      	asrs	r3, r3, #8
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	371c      	adds	r7, #28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80013ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f0:	b0cc      	sub	sp, #304	; 0x130
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80013f8:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80013fc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001404:	17da      	asrs	r2, r3, #31
 8001406:	461c      	mov	r4, r3
 8001408:	4615      	mov	r5, r2
 800140a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800140e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001412:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001416:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800141a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800141e:	fb03 f102 	mul.w	r1, r3, r2
 8001422:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	18ca      	adds	r2, r1, r3
 8001430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001434:	fba3 8903 	umull	r8, r9, r3, r3
 8001438:	eb02 0309 	add.w	r3, r2, r9
 800143c:	4699      	mov	r9, r3
 800143e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001442:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001446:	b21b      	sxth	r3, r3
 8001448:	17da      	asrs	r2, r3, #31
 800144a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800144e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001452:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001456:	4603      	mov	r3, r0
 8001458:	fb03 f209 	mul.w	r2, r3, r9
 800145c:	460b      	mov	r3, r1
 800145e:	fb08 f303 	mul.w	r3, r8, r3
 8001462:	4413      	add	r3, r2
 8001464:	4602      	mov	r2, r0
 8001466:	fba8 1202 	umull	r1, r2, r8, r2
 800146a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800146e:	460a      	mov	r2, r1
 8001470:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001474:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001478:	4413      	add	r3, r2
 800147a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800147e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001482:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001486:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800148a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800148e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001492:	b21b      	sxth	r3, r3
 8001494:	17da      	asrs	r2, r3, #31
 8001496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800149a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800149e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014a2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80014a6:	462a      	mov	r2, r5
 80014a8:	fb02 f203 	mul.w	r2, r2, r3
 80014ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014b0:	4621      	mov	r1, r4
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	441a      	add	r2, r3
 80014b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014bc:	4621      	mov	r1, r4
 80014be:	fba3 1301 	umull	r1, r3, r3, r1
 80014c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014c6:	460b      	mov	r3, r1
 80014c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014d0:	18d3      	adds	r3, r2, r3
 80014d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014d6:	f04f 0000 	mov.w	r0, #0
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80014e2:	462b      	mov	r3, r5
 80014e4:	0459      	lsls	r1, r3, #17
 80014e6:	4623      	mov	r3, r4
 80014e8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80014ec:	4623      	mov	r3, r4
 80014ee:	0458      	lsls	r0, r3, #17
 80014f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014f4:	1814      	adds	r4, r2, r0
 80014f6:	643c      	str	r4, [r7, #64]	; 0x40
 80014f8:	414b      	adcs	r3, r1
 80014fa:	647b      	str	r3, [r7, #68]	; 0x44
 80014fc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001500:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001508:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800150c:	b21b      	sxth	r3, r3
 800150e:	17da      	asrs	r2, r3, #31
 8001510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001514:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001518:	f04f 0000 	mov.w	r0, #0
 800151c:	f04f 0100 	mov.w	r1, #0
 8001520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001524:	00d9      	lsls	r1, r3, #3
 8001526:	2000      	movs	r0, #0
 8001528:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800152c:	1814      	adds	r4, r2, r0
 800152e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001530:	414b      	adcs	r3, r1
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001534:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001538:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800153c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001544:	fb03 f102 	mul.w	r1, r3, r2
 8001548:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800154c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	18ca      	adds	r2, r1, r3
 8001556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800155a:	fba3 1303 	umull	r1, r3, r3, r3
 800155e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001562:	460b      	mov	r3, r1
 8001564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800156c:	18d3      	adds	r3, r2, r3
 800156e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001576:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800157a:	b21b      	sxth	r3, r3
 800157c:	17da      	asrs	r2, r3, #31
 800157e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001586:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800158a:	462b      	mov	r3, r5
 800158c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001590:	4642      	mov	r2, r8
 8001592:	fb02 f203 	mul.w	r2, r2, r3
 8001596:	464b      	mov	r3, r9
 8001598:	4621      	mov	r1, r4
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	4622      	mov	r2, r4
 80015a2:	4641      	mov	r1, r8
 80015a4:	fba2 1201 	umull	r1, r2, r2, r1
 80015a8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80015ac:	460a      	mov	r2, r1
 80015ae:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80015b2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80015b6:	4413      	add	r3, r2
 80015b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015bc:	f04f 0000 	mov.w	r0, #0
 80015c0:	f04f 0100 	mov.w	r1, #0
 80015c4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80015c8:	4623      	mov	r3, r4
 80015ca:	0a18      	lsrs	r0, r3, #8
 80015cc:	462b      	mov	r3, r5
 80015ce:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015d2:	462b      	mov	r3, r5
 80015d4:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80015d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	17da      	asrs	r2, r3, #31
 80015e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015e6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ee:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80015f2:	464a      	mov	r2, r9
 80015f4:	fb02 f203 	mul.w	r2, r2, r3
 80015f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015fc:	4644      	mov	r4, r8
 80015fe:	fb04 f303 	mul.w	r3, r4, r3
 8001602:	441a      	add	r2, r3
 8001604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001608:	4644      	mov	r4, r8
 800160a:	fba3 4304 	umull	r4, r3, r3, r4
 800160e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001612:	4623      	mov	r3, r4
 8001614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001618:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800162e:	464c      	mov	r4, r9
 8001630:	0323      	lsls	r3, r4, #12
 8001632:	4644      	mov	r4, r8
 8001634:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001638:	4644      	mov	r4, r8
 800163a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800163c:	1884      	adds	r4, r0, r2
 800163e:	633c      	str	r4, [r7, #48]	; 0x30
 8001640:	eb41 0303 	adc.w	r3, r1, r3
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
 8001646:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800164a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800164e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001652:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001656:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800165a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800165e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001662:	88db      	ldrh	r3, [r3, #6]
 8001664:	b29b      	uxth	r3, r3
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800166c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001670:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001674:	462b      	mov	r3, r5
 8001676:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800167a:	4642      	mov	r2, r8
 800167c:	fb02 f203 	mul.w	r2, r2, r3
 8001680:	464b      	mov	r3, r9
 8001682:	4621      	mov	r1, r4
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	4622      	mov	r2, r4
 800168c:	4641      	mov	r1, r8
 800168e:	fba2 1201 	umull	r1, r2, r2, r1
 8001692:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001696:	460a      	mov	r2, r1
 8001698:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800169c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016a0:	4413      	add	r3, r2
 80016a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80016b2:	4629      	mov	r1, r5
 80016b4:	104a      	asrs	r2, r1, #1
 80016b6:	4629      	mov	r1, r5
 80016b8:	17cb      	asrs	r3, r1, #31
 80016ba:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80016be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80016c2:	4313      	orrs	r3, r2
 80016c4:	d101      	bne.n	80016ca <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80016c6:	2300      	movs	r3, #0
 80016c8:	e148      	b.n	800195c <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80016ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016ce:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016d2:	17da      	asrs	r2, r3, #31
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016d8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80016dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80016e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016e4:	105b      	asrs	r3, r3, #1
 80016e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016ee:	07db      	lsls	r3, r3, #31
 80016f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016f8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80016fc:	4621      	mov	r1, r4
 80016fe:	1a89      	subs	r1, r1, r2
 8001700:	67b9      	str	r1, [r7, #120]	; 0x78
 8001702:	4629      	mov	r1, r5
 8001704:	eb61 0303 	sbc.w	r3, r1, r3
 8001708:	67fb      	str	r3, [r7, #124]	; 0x7c
 800170a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800170e:	4622      	mov	r2, r4
 8001710:	462b      	mov	r3, r5
 8001712:	1891      	adds	r1, r2, r2
 8001714:	6239      	str	r1, [r7, #32]
 8001716:	415b      	adcs	r3, r3
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
 800171a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800171e:	4621      	mov	r1, r4
 8001720:	1851      	adds	r1, r2, r1
 8001722:	61b9      	str	r1, [r7, #24]
 8001724:	4629      	mov	r1, r5
 8001726:	414b      	adcs	r3, r1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001736:	4649      	mov	r1, r9
 8001738:	018b      	lsls	r3, r1, #6
 800173a:	4641      	mov	r1, r8
 800173c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001740:	4641      	mov	r1, r8
 8001742:	018a      	lsls	r2, r1, #6
 8001744:	4641      	mov	r1, r8
 8001746:	1889      	adds	r1, r1, r2
 8001748:	6139      	str	r1, [r7, #16]
 800174a:	4649      	mov	r1, r9
 800174c:	eb43 0101 	adc.w	r1, r3, r1
 8001750:	6179      	str	r1, [r7, #20]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800175e:	4649      	mov	r1, r9
 8001760:	008b      	lsls	r3, r1, #2
 8001762:	4641      	mov	r1, r8
 8001764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001768:	4641      	mov	r1, r8
 800176a:	008a      	lsls	r2, r1, #2
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	4603      	mov	r3, r0
 8001772:	4622      	mov	r2, r4
 8001774:	189b      	adds	r3, r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	460b      	mov	r3, r1
 800177a:	462a      	mov	r2, r5
 800177c:	eb42 0303 	adc.w	r3, r2, r3
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800178e:	4649      	mov	r1, r9
 8001790:	008b      	lsls	r3, r1, #2
 8001792:	4641      	mov	r1, r8
 8001794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001798:	4641      	mov	r1, r8
 800179a:	008a      	lsls	r2, r1, #2
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	4603      	mov	r3, r0
 80017a2:	4622      	mov	r2, r4
 80017a4:	189b      	adds	r3, r3, r2
 80017a6:	673b      	str	r3, [r7, #112]	; 0x70
 80017a8:	462b      	mov	r3, r5
 80017aa:	460a      	mov	r2, r1
 80017ac:	eb42 0303 	adc.w	r3, r2, r3
 80017b0:	677b      	str	r3, [r7, #116]	; 0x74
 80017b2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017b6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017ba:	f7ff f9e5 	bl	8000b88 <__aeabi_ldivmod>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80017c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	17da      	asrs	r2, r3, #31
 80017d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80017d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017da:	f04f 0000 	mov.w	r0, #0
 80017de:	f04f 0100 	mov.w	r1, #0
 80017e2:	0b50      	lsrs	r0, r2, #13
 80017e4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017e8:	1359      	asrs	r1, r3, #13
 80017ea:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80017ee:	462b      	mov	r3, r5
 80017f0:	fb00 f203 	mul.w	r2, r0, r3
 80017f4:	4623      	mov	r3, r4
 80017f6:	fb03 f301 	mul.w	r3, r3, r1
 80017fa:	4413      	add	r3, r2
 80017fc:	4622      	mov	r2, r4
 80017fe:	fba2 1200 	umull	r1, r2, r2, r0
 8001802:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001806:	460a      	mov	r2, r1
 8001808:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800180c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001810:	4413      	add	r3, r2
 8001812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001816:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0b50      	lsrs	r0, r2, #13
 8001824:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001828:	1359      	asrs	r1, r3, #13
 800182a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800182e:	462b      	mov	r3, r5
 8001830:	fb00 f203 	mul.w	r2, r0, r3
 8001834:	4623      	mov	r3, r4
 8001836:	fb03 f301 	mul.w	r3, r3, r1
 800183a:	4413      	add	r3, r2
 800183c:	4622      	mov	r2, r4
 800183e:	fba2 1200 	umull	r1, r2, r2, r0
 8001842:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001846:	460a      	mov	r2, r1
 8001848:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800184c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001850:	4413      	add	r3, r2
 8001852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001862:	4621      	mov	r1, r4
 8001864:	0e4a      	lsrs	r2, r1, #25
 8001866:	4629      	mov	r1, r5
 8001868:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800186c:	4629      	mov	r1, r5
 800186e:	164b      	asrs	r3, r1, #25
 8001870:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001878:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800187c:	b21b      	sxth	r3, r3
 800187e:	17da      	asrs	r2, r3, #31
 8001880:	663b      	str	r3, [r7, #96]	; 0x60
 8001882:	667a      	str	r2, [r7, #100]	; 0x64
 8001884:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001888:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800188c:	462a      	mov	r2, r5
 800188e:	fb02 f203 	mul.w	r2, r2, r3
 8001892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001896:	4621      	mov	r1, r4
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018a2:	4621      	mov	r1, r4
 80018a4:	fba2 1201 	umull	r1, r2, r2, r1
 80018a8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80018ac:	460a      	mov	r2, r1
 80018ae:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80018b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80018b6:	4413      	add	r3, r2
 80018b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80018c8:	4621      	mov	r1, r4
 80018ca:	0cca      	lsrs	r2, r1, #19
 80018cc:	4629      	mov	r1, r5
 80018ce:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018d2:	4629      	mov	r1, r5
 80018d4:	14cb      	asrs	r3, r1, #19
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80018da:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80018de:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80018e2:	1884      	adds	r4, r0, r2
 80018e4:	65bc      	str	r4, [r7, #88]	; 0x58
 80018e6:	eb41 0303 	adc.w	r3, r1, r3
 80018ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018f0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80018f4:	4621      	mov	r1, r4
 80018f6:	1889      	adds	r1, r1, r2
 80018f8:	6539      	str	r1, [r7, #80]	; 0x50
 80018fa:	4629      	mov	r1, r5
 80018fc:	eb43 0101 	adc.w	r1, r3, r1
 8001900:	6579      	str	r1, [r7, #84]	; 0x54
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800190e:	4623      	mov	r3, r4
 8001910:	0a18      	lsrs	r0, r3, #8
 8001912:	462b      	mov	r3, r5
 8001914:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001918:	462b      	mov	r3, r5
 800191a:	1219      	asrs	r1, r3, #8
 800191c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001920:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001924:	b21b      	sxth	r3, r3
 8001926:	17da      	asrs	r2, r3, #31
 8001928:	64bb      	str	r3, [r7, #72]	; 0x48
 800192a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001938:	464c      	mov	r4, r9
 800193a:	0123      	lsls	r3, r4, #4
 800193c:	4644      	mov	r4, r8
 800193e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001942:	4644      	mov	r4, r8
 8001944:	0122      	lsls	r2, r4, #4
 8001946:	1884      	adds	r4, r0, r2
 8001948:	603c      	str	r4, [r7, #0]
 800194a:	eb41 0303 	adc.w	r3, r1, r3
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001954:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001958:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800195c:	4618      	mov	r0, r3
 800195e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001962:	46bd      	mov	sp, r7
 8001964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001968 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800197a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	039a      	lsls	r2, r3, #14
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001986:	051b      	lsls	r3, r3, #20
 8001988:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001990:	4619      	mov	r1, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800199e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019a6:	4611      	mov	r1, r2
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	fb01 f202 	mul.w	r2, r1, r2
 80019ae:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	7f09      	ldrb	r1, [r1, #28]
 80019b4:	4608      	mov	r0, r1
 80019b6:	6979      	ldr	r1, [r7, #20]
 80019b8:	fb00 f101 	mul.w	r1, r0, r1
 80019bc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019be:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019c2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019c6:	1292      	asrs	r2, r2, #10
 80019c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80019d2:	fb01 f202 	mul.w	r2, r1, r2
 80019d6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019da:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	13db      	asrs	r3, r3, #15
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	13d2      	asrs	r2, r2, #15
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	7e12      	ldrb	r2, [r2, #24]
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a06:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a0e:	bfa8      	it	ge
 8001a10:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a14:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	131b      	asrs	r3, r3, #12
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b08c      	sub	sp, #48	; 0x30
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a3a:	2b60      	cmp	r3, #96	; 0x60
 8001a3c:	d007      	beq.n	8001a4e <bmp280_read_fixed+0x28>
		if (humidity)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <bmp280_read_fixed+0x32>
 8001a54:	2308      	movs	r3, #8
 8001a56:	e000      	b.n	8001a5a <bmp280_read_fixed+0x34>
 8001a58:	2306      	movs	r3, #6
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f107 0218 	add.w	r2, r7, #24
 8001a64:	21f7      	movs	r1, #247	; 0xf7
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff faab 	bl	8000fc2 <read_data>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <bmp280_read_fixed+0x50>
		return false;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e038      	b.n	8001ae8 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001a76:	7e3b      	ldrb	r3, [r7, #24]
 8001a78:	031a      	lsls	r2, r3, #12
 8001a7a:	7e7b      	ldrb	r3, [r7, #25]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	7eba      	ldrb	r2, [r7, #26]
 8001a82:	0912      	lsrs	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	4313      	orrs	r3, r2
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001a8a:	7efb      	ldrb	r3, [r7, #27]
 8001a8c:	031a      	lsls	r2, r3, #12
 8001a8e:	7f3b      	ldrb	r3, [r7, #28]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4313      	orrs	r3, r2
 8001a94:	7f7a      	ldrb	r2, [r7, #29]
 8001a96:	0912      	lsrs	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff fc67 	bl	800137a <compensate_temperature>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff fc97 	bl	80013ec <compensate_pressure>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00d      	beq.n	8001ae6 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001aca:	7fbb      	ldrb	r3, [r7, #30]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	7ffa      	ldrb	r2, [r7, #31]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff ff44 	bl	8001968 <compensate_humidity>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <bmp280_read_float+0x1a>
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	e000      	b.n	8001b0c <bmp280_read_float+0x1c>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f107 0218 	add.w	r2, r7, #24
 8001b10:	f107 011c 	add.w	r1, r7, #28
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff ff86 	bl	8001a26 <bmp280_read_fixed>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d028      	beq.n	8001b72 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b7c <bmp280_read_float+0x8c>
 8001b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b42:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001b80 <bmp280_read_float+0x90>
 8001b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b60:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b84 <bmp280_read_float+0x94>
 8001b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <bmp280_read_float+0x84>
	}

	return false;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	42c80000 	.word	0x42c80000
 8001b80:	43800000 	.word	0x43800000
 8001b84:	44800000 	.word	0x44800000

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8c:	f000 fb97 	bl	80022be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b90:	f000 f834 	bl	8001bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b94:	f000 f8de 	bl	8001d54 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b98:	f000 f89c 	bl	8001cd4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b9c:	f003 f824 	bl	8004be8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <main+0x50>)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <main+0x54>)
 8001ba6:	f003 f889 	bl	8004cbc <osThreadNew>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <main+0x58>)
 8001bae:	6013      	str	r3, [r2, #0]

  /* creation of sense */
  senseHandle = osThreadNew(read_pressure, NULL, &sense_attributes);
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <main+0x5c>)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <main+0x60>)
 8001bb6:	f003 f881 	bl	8004cbc <osThreadNew>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <main+0x64>)
 8001bbe:	6013      	str	r3, [r2, #0]

  /* creation of decide */
  decideHandle = osThreadNew(explosion, NULL, &decide_attributes);
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <main+0x68>)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <main+0x6c>)
 8001bc6:	f003 f879 	bl	8004cbc <osThreadNew>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <main+0x70>)
 8001bce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bd0:	f003 f83e 	bl	8004c50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <main+0x4c>
 8001bd6:	bf00      	nop
 8001bd8:	0800885c 	.word	0x0800885c
 8001bdc:	08001ded 	.word	0x08001ded
 8001be0:	20000134 	.word	0x20000134
 8001be4:	08008880 	.word	0x08008880
 8001be8:	08001e01 	.word	0x08001e01
 8001bec:	20000138 	.word	0x20000138
 8001bf0:	080088a4 	.word	0x080088a4
 8001bf4:	08001f79 	.word	0x08001f79
 8001bf8:	2000013c 	.word	0x2000013c

08001bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	; 0x50
 8001c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 0320 	add.w	r3, r7, #32
 8001c06:	2230      	movs	r2, #48	; 0x30
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fe18 	bl	8007840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <SystemClock_Config+0xd0>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <SystemClock_Config+0xd0>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <SystemClock_Config+0xd0>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <SystemClock_Config+0xd4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <SystemClock_Config+0xd4>)
 8001c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <SystemClock_Config+0xd4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c50:	2302      	movs	r3, #2
 8001c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c64:	2308      	movs	r3, #8
 8001c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c68:	23d8      	movs	r3, #216	; 0xd8
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fc35 	bl	80034e8 <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001c84:	f000 f9c2 	bl	800200c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c88:	f001 fbde 	bl	8003448 <HAL_PWREx_EnableOverDrive>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c92:	f000 f9bb 	bl	800200c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c96:	230f      	movs	r3, #15
 8001c98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ca2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2107      	movs	r1, #7
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 febb 	bl	8003a30 <HAL_RCC_ClockConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001cc0:	f000 f9a4 	bl	800200c <Error_Handler>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3750      	adds	r7, #80	; 0x50
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <MX_I2C1_Init+0x78>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <MX_I2C1_Init+0x7c>)
 8001ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d0e:	480e      	ldr	r0, [pc, #56]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001d10:	f000 fdaa 	bl	8002868 <HAL_I2C_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d1a:	f000 f977 	bl	800200c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001d22:	f001 faf9 	bl	8003318 <HAL_I2CEx_ConfigAnalogFilter>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d2c:	f000 f96e 	bl	800200c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d30:	2100      	movs	r1, #0
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_I2C1_Init+0x74>)
 8001d34:	f001 fb3b 	bl	80033ae <HAL_I2CEx_ConfigDigitalFilter>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 f965 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200000e0 	.word	0x200000e0
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	20404768 	.word	0x20404768

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001d70:	f043 0320 	orr.w	r3, r3, #32
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <MX_GPIO_Init+0x90>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_14, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <MX_GPIO_Init+0x94>)
 8001dba:	f000 fd3b 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_14;
 8001dbe:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001dc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_GPIO_Init+0x94>)
 8001dd8:	f000 fb80 	bl	80024dc <HAL_GPIO_Init>

}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40021400 	.word	0x40021400

08001dec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f003 f807 	bl	8004e08 <osDelay>
 8001dfa:	e7fb      	b.n	8001df4 <StartDefaultTask+0x8>
 8001dfc:	0000      	movs	r0, r0
	...

08001e00 <read_pressure>:
*/


/* USER CODE END Header_read_pressure */
void read_pressure(void *argument)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_pressure */
	  #define seaLevelhPa 101323

	  bmp280_init_default_params(&bmp280.params);
 8001e08:	484f      	ldr	r0, [pc, #316]	; (8001f48 <read_pressure+0x148>)
 8001e0a:	f7ff f88f 	bl	8000f2c <bmp280_init_default_params>
	  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <read_pressure+0x14c>)
 8001e10:	2276      	movs	r2, #118	; 0x76
 8001e12:	849a      	strh	r2, [r3, #36]	; 0x24
	  bmp280.i2c = &hi2c1;
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <read_pressure+0x14c>)
 8001e16:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <read_pressure+0x150>)
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
	  bmp280_init(&bmp280, &bmp280.params);
 8001e1a:	494b      	ldr	r1, [pc, #300]	; (8001f48 <read_pressure+0x148>)
 8001e1c:	484b      	ldr	r0, [pc, #300]	; (8001f4c <read_pressure+0x14c>)
 8001e1e:	f7ff f9ff 	bl	8001220 <bmp280_init>
	  bool bme280p = bmp280.id == BMP280_CHIP_ID;
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <read_pressure+0x14c>)
 8001e24:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e28:	2b58      	cmp	r3, #88	; 0x58
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]

	  for(i=0;i<500;i++)
 8001e32:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <read_pressure+0x154>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e036      	b.n	8001ea8 <read_pressure+0xa8>
	  {
		  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <read_pressure+0x158>)
 8001e3c:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <read_pressure+0x15c>)
 8001e3e:	4948      	ldr	r1, [pc, #288]	; (8001f60 <read_pressure+0x160>)
 8001e40:	4842      	ldr	r0, [pc, #264]	; (8001f4c <read_pressure+0x14c>)
 8001e42:	f7ff fe55 	bl	8001af0 <bmp280_read_float>
		  reference_altitude = 44330 * (1.0 - pow(pressure / seaLevelhPa, 0.1903));
 8001e46:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <read_pressure+0x15c>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001f64 <read_pressure+0x164>
 8001e50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e54:	ee16 0a90 	vmov	r0, s13
 8001e58:	f7fe fb3e 	bl	80004d8 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001f38 <read_pressure+0x138>
 8001e64:	ec43 2b10 	vmov	d0, r2, r3
 8001e68:	f005 fdb4 	bl	80079d4 <pow>
 8001e6c:	ec53 2b10 	vmov	r2, r3, d0
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	493c      	ldr	r1, [pc, #240]	; (8001f68 <read_pressure+0x168>)
 8001e76:	f7fe f9cf 	bl	8000218 <__aeabi_dsub>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	a32f      	add	r3, pc, #188	; (adr r3, 8001f40 <read_pressure+0x140>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb7e 	bl	8000588 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7fe fe28 	bl	8000ae8 <__aeabi_d2f>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <read_pressure+0x16c>)
 8001e9c:	6013      	str	r3, [r2, #0]
	  for(i=0;i<500;i++)
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <read_pressure+0x154>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <read_pressure+0x154>)
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <read_pressure+0x154>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eb0:	dbc3      	blt.n	8001e3a <read_pressure+0x3a>
	  }

  /* Infinite loop */
  for(;;)
  {
	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <read_pressure+0x158>)
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <read_pressure+0x15c>)
 8001eb6:	492a      	ldr	r1, [pc, #168]	; (8001f60 <read_pressure+0x160>)
 8001eb8:	4824      	ldr	r0, [pc, #144]	; (8001f4c <read_pressure+0x14c>)
 8001eba:	f7ff fe19 	bl	8001af0 <bmp280_read_float>
	  altitude = 44330 * (1.0 - pow(pressure / seaLevelhPa, 0.1903));
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <read_pressure+0x15c>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001f64 <read_pressure+0x164>
 8001ec8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ecc:	ee16 0a90 	vmov	r0, s13
 8001ed0:	f7fe fb02 	bl	80004d8 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001f38 <read_pressure+0x138>
 8001edc:	ec43 2b10 	vmov	d0, r2, r3
 8001ee0:	f005 fd78 	bl	80079d4 <pow>
 8001ee4:	ec53 2b10 	vmov	r2, r3, d0
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	491e      	ldr	r1, [pc, #120]	; (8001f68 <read_pressure+0x168>)
 8001eee:	f7fe f993 	bl	8000218 <__aeabi_dsub>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	a311      	add	r3, pc, #68	; (adr r3, 8001f40 <read_pressure+0x140>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fb42 	bl	8000588 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fdec 	bl	8000ae8 <__aeabi_d2f>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <read_pressure+0x170>)
 8001f14:	6013      	str	r3, [r2, #0]
	  related_altitude = altitude - reference_altitude;
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <read_pressure+0x170>)
 8001f18:	ed93 7a00 	vldr	s14, [r3]
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <read_pressure+0x16c>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <read_pressure+0x174>)
 8001f28:	edc3 7a00 	vstr	s15, [r3]

    osDelay(1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f002 ff6b 	bl	8004e08 <osDelay>
  {
 8001f32:	e7be      	b.n	8001eb2 <read_pressure+0xb2>
 8001f34:	f3af 8000 	nop.w
 8001f38:	1a36e2eb 	.word	0x1a36e2eb
 8001f3c:	3fc85bc0 	.word	0x3fc85bc0
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40e5a540 	.word	0x40e5a540
 8001f48:	200000bc 	.word	0x200000bc
 8001f4c:	20000090 	.word	0x20000090
 8001f50:	200000e0 	.word	0x200000e0
 8001f54:	200000dc 	.word	0x200000dc
 8001f58:	200000cc 	.word	0x200000cc
 8001f5c:	200000c4 	.word	0x200000c4
 8001f60:	200000c8 	.word	0x200000c8
 8001f64:	47c5e580 	.word	0x47c5e580
 8001f68:	3ff00000 	.word	0x3ff00000
 8001f6c:	200000d4 	.word	0x200000d4
 8001f70:	200000d0 	.word	0x200000d0
 8001f74:	200000d8 	.word	0x200000d8

08001f78 <explosion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_explosion */
void explosion(void *argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN explosion */
  /* Infinite loop */
  for(;;)
  {

	if(related_altitude > 5)
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <explosion+0x68>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	dd21      	ble.n	8001fd8 <explosion+0x60>
	{
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	4812      	ldr	r0, [pc, #72]	; (8001fe4 <explosion+0x6c>)
 8001f9a:	f000 fc4b 	bl	8002834 <HAL_GPIO_WritePin>
		osDelay(100);
 8001f9e:	2064      	movs	r0, #100	; 0x64
 8001fa0:	f002 ff32 	bl	8004e08 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <explosion+0x6c>)
 8001faa:	f000 fc43 	bl	8002834 <HAL_GPIO_WritePin>
		osDelay(100);
 8001fae:	2064      	movs	r0, #100	; 0x64
 8001fb0:	f002 ff2a 	bl	8004e08 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fba:	480a      	ldr	r0, [pc, #40]	; (8001fe4 <explosion+0x6c>)
 8001fbc:	f000 fc3a 	bl	8002834 <HAL_GPIO_WritePin>
		osDelay(100);
 8001fc0:	2064      	movs	r0, #100	; 0x64
 8001fc2:	f002 ff21 	bl	8004e08 <osDelay>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <explosion+0x6c>)
 8001fce:	f000 fc31 	bl	8002834 <HAL_GPIO_WritePin>
		osDelay(100);
 8001fd2:	2064      	movs	r0, #100	; 0x64
 8001fd4:	f002 ff18 	bl	8004e08 <osDelay>

	}

    osDelay(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f002 ff15 	bl	8004e08 <osDelay>
	if(related_altitude > 5)
 8001fde:	e7cf      	b.n	8001f80 <explosion+0x8>
 8001fe0:	200000d8 	.word	0x200000d8
 8001fe4:	40021400 	.word	0x40021400

08001fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ffa:	f000 f96d 	bl	80022d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002010:	b672      	cpsid	i
}
 8002012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002014:	e7fe      	b.n	8002014 <Error_Handler+0x8>
	...

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_MspInit+0x4c>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_MspInit+0x4c>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_MspInit+0x4c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_MspInit+0x4c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_MspInit+0x4c>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_MspInit+0x4c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	210f      	movs	r1, #15
 8002052:	f06f 0001 	mvn.w	r0, #1
 8002056:	f000 fa17 	bl	8002488 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800

08002068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0aa      	sub	sp, #168	; 0xa8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	2284      	movs	r2, #132	; 0x84
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f005 fbd9 	bl	8007840 <memset>
  if(hi2c->Instance==I2C1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_I2C_MspInit+0xb0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d13b      	bne.n	8002110 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002098:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800209c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800209e:	2300      	movs	r3, #0
 80020a0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 fec6 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020b2:	f7ff ffab 	bl	800200c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a18      	ldr	r2, [pc, #96]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ce:	23c0      	movs	r3, #192	; 0xc0
 80020d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e6:	2304      	movs	r3, #4
 80020e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020f0:	4619      	mov	r1, r3
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <HAL_I2C_MspInit+0xb8>)
 80020f4:	f000 f9f2 	bl	80024dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_I2C_MspInit+0xb4>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002110:	bf00      	nop
 8002112:	37a8      	adds	r7, #168	; 0xa8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40005400 	.word	0x40005400
 800211c:	40023800 	.word	0x40023800
 8002120:	40020400 	.word	0x40020400

08002124 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_InitTick+0xd0>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_InitTick+0xd0>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6453      	str	r3, [r2, #68]	; 0x44
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_InitTick+0xd0>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214c:	f107 020c 	add.w	r2, r7, #12
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f001 fe3c 	bl	8003dd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800215c:	f001 fe26 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 8002160:	4603      	mov	r3, r0
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <HAL_InitTick+0xd4>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	3b01      	subs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_InitTick+0xd8>)
 8002176:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_InitTick+0xdc>)
 8002178:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_InitTick+0xd8>)
 800217c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002180:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002182:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_InitTick+0xd8>)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_InitTick+0xd8>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_InitTick+0xd8>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_InitTick+0xd8>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800219a:	4818      	ldr	r0, [pc, #96]	; (80021fc <HAL_InitTick+0xd8>)
 800219c:	f002 fa3c 	bl	8004618 <HAL_TIM_Base_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11b      	bne.n	80021e6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021ae:	4813      	ldr	r0, [pc, #76]	; (80021fc <HAL_InitTick+0xd8>)
 80021b0:	f002 fa94 	bl	80046dc <HAL_TIM_Base_Start_IT>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80021ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d111      	bne.n	80021e6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021c2:	2019      	movs	r0, #25
 80021c4:	f000 f97c 	bl	80024c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	d808      	bhi.n	80021e0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80021ce:	2200      	movs	r2, #0
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	2019      	movs	r0, #25
 80021d4:	f000 f958 	bl	8002488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_InitTick+0xe0>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e002      	b.n	80021e6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3730      	adds	r7, #48	; 0x30
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	431bde83 	.word	0x431bde83
 80021fc:	20000140 	.word	0x20000140
 8002200:	40010000 	.word	0x40010000
 8002204:	20000004 	.word	0x20000004

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler+0x4>

0800220e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <MemManage_Handler+0x4>

0800221a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <UsageFault_Handler+0x4>

08002226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800223a:	f002 fac7 	bl	80047cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000140 	.word	0x20000140

08002248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <SystemInit+0x20>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <SystemInit+0x20>)
 8002254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002272:	490e      	ldr	r1, [pc, #56]	; (80022ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002288:	4c0b      	ldr	r4, [pc, #44]	; (80022b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002296:	f7ff ffd7 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f005 fa9d 	bl	80077d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229e:	f7ff fc73 	bl	8001b88 <main>
  bx  lr    
 80022a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022b0:	08008980 	.word	0x08008980
  ldr r2, =_sbss
 80022b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022b8:	20004ba0 	.word	0x20004ba0

080022bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC_IRQHandler>

080022be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c2:	2003      	movs	r0, #3
 80022c4:	f000 f8d5 	bl	8002472 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c8:	200f      	movs	r0, #15
 80022ca:	f7ff ff2b 	bl	8002124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ce:	f7ff fea3 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008
 80022fc:	2000018c 	.word	0x2000018c

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	2000018c 	.word	0x2000018c

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <__NVIC_SetPriorityGrouping+0x40>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	4313      	orrs	r3, r2
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x40>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00
 800235c:	05fa0000 	.word	0x05fa0000

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ff4c 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249a:	f7ff ff61 	bl	8002360 <__NVIC_GetPriorityGrouping>
 800249e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	6978      	ldr	r0, [r7, #20]
 80024a6:	f7ff ffb1 	bl	800240c <NVIC_EncodePriority>
 80024aa:	4602      	mov	r2, r0
 80024ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff80 	bl	80023b8 <__NVIC_SetPriority>
}
 80024b8:	bf00      	nop
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff54 	bl	800237c <__NVIC_EnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e175      	b.n	80027e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 8164 	bne.w	80027e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d005      	beq.n	8002532 <HAL_GPIO_Init+0x56>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d130      	bne.n	8002594 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b03      	cmp	r3, #3
 800259e:	d017      	beq.n	80025d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d123      	bne.n	8002624 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80be 	beq.w	80027e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a65      	ldr	r2, [pc, #404]	; (8002800 <HAL_GPIO_Init+0x324>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800267e:	4a61      	ldr	r2, [pc, #388]	; (8002804 <HAL_GPIO_Init+0x328>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_GPIO_Init+0x32c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d037      	beq.n	800271a <HAL_GPIO_Init+0x23e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_GPIO_Init+0x330>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d031      	beq.n	8002716 <HAL_GPIO_Init+0x23a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a56      	ldr	r2, [pc, #344]	; (8002810 <HAL_GPIO_Init+0x334>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <HAL_GPIO_Init+0x236>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_GPIO_Init+0x338>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x232>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_GPIO_Init+0x33c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x22e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_GPIO_Init+0x340>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x22a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_GPIO_Init+0x344>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x226>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x348>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a50      	ldr	r2, [pc, #320]	; (8002828 <HAL_GPIO_Init+0x34c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4f      	ldr	r2, [pc, #316]	; (800282c <HAL_GPIO_Init+0x350>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026f2:	2309      	movs	r3, #9
 80026f4:	e012      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026f6:	230a      	movs	r3, #10
 80026f8:	e010      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fa:	2308      	movs	r3, #8
 80026fc:	e00e      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00c      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002702:	2306      	movs	r3, #6
 8002704:	e00a      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002706:	2305      	movs	r3, #5
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270a:	2304      	movs	r3, #4
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x240>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_GPIO_Init+0x328>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_GPIO_Init+0x354>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_GPIO_Init+0x354>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f ae86 	bls.w	80024fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40021400 	.word	0x40021400
 8002820:	40021800 	.word	0x40021800
 8002824:	40021c00 	.word	0x40021c00
 8002828:	40022000 	.word	0x40022000
 800282c:	40022400 	.word	0x40022400
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e07f      	b.n	800297a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fbea 	bl	8002068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	; 0x24
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d107      	bne.n	80028e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	e006      	b.n	80028f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d104      	bne.n	8002902 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_I2C_Init+0x11c>)
 800290e:	430b      	orrs	r3, r1
 8002910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69d9      	ldr	r1, [r3, #28]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1a      	ldr	r2, [r3, #32]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	02008000 	.word	0x02008000

08002988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	460b      	mov	r3, r1
 800299c:	813b      	strh	r3, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	f040 80f9 	bne.w	8002ba2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_I2C_Mem_Write+0x34>
 80029b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0ed      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Mem_Write+0x4e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e0e6      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029de:	f7ff fc8f 	bl	8002300 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2319      	movs	r3, #25
 80029ea:	2201      	movs	r2, #1
 80029ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fac3 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d1      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2221      	movs	r2, #33	; 0x21
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a28:	88f8      	ldrh	r0, [r7, #6]
 8002a2a:	893a      	ldrh	r2, [r7, #8]
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4603      	mov	r3, r0
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f9d3 	bl	8002de4 <I2C_RequestMemoryWrite>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0a9      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d90e      	bls.n	8002a78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fc1f 	bl	80032b4 <I2C_TransferConfig>
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fc0e 	bl	80032b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 faad 	bl	8002ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e07b      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d034      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x1c8>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d130      	bne.n	8002b50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa3f 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04d      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2bff      	cmp	r3, #255	; 0xff
 8002b10:	d90e      	bls.n	8002b30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	2300      	movs	r3, #0
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fbc3 	bl	80032b4 <I2C_TransferConfig>
 8002b2e:	e00f      	b.n	8002b50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	8979      	ldrh	r1, [r7, #10]
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fbb2 	bl	80032b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d19e      	bne.n	8002a98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fa8c 	bl	800307c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e01a      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_I2C_Mem_Write+0x224>)
 8002b82:	400b      	ands	r3, r1
 8002b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	fe00e800 	.word	0xfe00e800

08002bb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	f040 80fd 	bne.w	8002dd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x34>
 8002bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0f1      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x4e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0ea      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c06:	f7ff fb7b 	bl	8002300 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f9af 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d5      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2222      	movs	r2, #34	; 0x22
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c50:	88f8      	ldrh	r0, [r7, #6]
 8002c52:	893a      	ldrh	r2, [r7, #8]
 8002c54:	8979      	ldrh	r1, [r7, #10]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	4603      	mov	r3, r0
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f913 	bl	8002e8c <I2C_RequestMemoryRead>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0ad      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2bff      	cmp	r3, #255	; 0xff
 8002c80:	d90e      	bls.n	8002ca0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	8979      	ldrh	r1, [r7, #10]
 8002c90:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <HAL_I2C_Mem_Read+0x22c>)
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fb0b 	bl	80032b4 <I2C_TransferConfig>
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	8979      	ldrh	r1, [r7, #10]
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_I2C_Mem_Read+0x22c>)
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fafa 	bl	80032b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2104      	movs	r1, #4
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f956 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07c      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d034      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x1d0>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d130      	bne.n	8002d80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f927 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e04d      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2bff      	cmp	r3, #255	; 0xff
 8002d40:	d90e      	bls.n	8002d60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 faab 	bl	80032b4 <I2C_TransferConfig>
 8002d5e:	e00f      	b.n	8002d80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa9a 	bl	80032b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d19a      	bne.n	8002cc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f974 	bl	800307c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e01a      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2220      	movs	r2, #32
 8002da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_I2C_Mem_Read+0x230>)
 8002db2:	400b      	ands	r3, r1
 8002db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	80002400 	.word	0x80002400
 8002de0:	fe00e800 	.word	0xfe00e800

08002de4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <I2C_RequestMemoryWrite+0xa4>)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fa51 	bl	80032b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8f0 	bl	8002ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e02c      	b.n	8002e80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
 8002e36:	e015      	b.n	8002e64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e38:	893b      	ldrh	r3, [r7, #8]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	69b9      	ldr	r1, [r7, #24]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f8d6 	bl	8002ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e012      	b.n	8002e80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5a:	893b      	ldrh	r3, [r7, #8]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f884 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	80002000 	.word	0x80002000

08002e8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <I2C_RequestMemoryRead+0xa4>)
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f9fe 	bl	80032b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f89d 	bl	8002ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e02c      	b.n	8002f26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed2:	893b      	ldrh	r3, [r7, #8]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
 8002edc:	e015      	b.n	8002f0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f883 	bl	8002ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e012      	b.n	8002f26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f831 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	80002000 	.word	0x80002000

08002f34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d103      	bne.n	8002f52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d007      	beq.n	8002f70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	619a      	str	r2, [r3, #24]
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8c:	e022      	b.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d01e      	beq.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7ff f9b3 	bl	8002300 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d113      	bne.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e00f      	b.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d0cd      	beq.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003008:	e02c      	b.n	8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f870 	bl	80030f4 <I2C_IsErrorOccurred>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e02a      	b.n	8003074 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d01e      	beq.n	8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7ff f96b 	bl	8002300 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d113      	bne.n	8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	d1cb      	bne.n	800300a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003088:	e028      	b.n	80030dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f830 	bl	80030f4 <I2C_IsErrorOccurred>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e026      	b.n	80030ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309e:	f7ff f92f 	bl	8002300 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d113      	bne.n	80030dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e007      	b.n	80030ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d1cf      	bne.n	800308a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d068      	beq.n	80031f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2210      	movs	r2, #16
 8003126:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003128:	e049      	b.n	80031be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d045      	beq.n	80031be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7ff f8e5 	bl	8002300 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_IsErrorOccurred+0x54>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d13a      	bne.n	80031be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800315a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316a:	d121      	bne.n	80031b0 <I2C_IsErrorOccurred+0xbc>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003172:	d01d      	beq.n	80031b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b20      	cmp	r3, #32
 8003178:	d01a      	beq.n	80031b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003188:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800318a:	f7ff f8b9 	bl	8002300 <HAL_GetTick>
 800318e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003190:	e00e      	b.n	80031b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003192:	f7ff f8b5 	bl	8002300 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b19      	cmp	r3, #25
 800319e:	d907      	bls.n	80031b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f043 0320 	orr.w	r3, r3, #32
 80031a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031ae:	e006      	b.n	80031be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d1e9      	bne.n	8003192 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d003      	beq.n	80031d4 <I2C_IsErrorOccurred+0xe0>
 80031cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0aa      	beq.n	800312a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2220      	movs	r2, #32
 80031e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f043 0308 	orr.w	r3, r3, #8
 800322c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003236:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f043 0302 	orr.w	r3, r3, #2
 800324e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01c      	beq.n	80032a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fe63 	bl	8002f34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <I2C_IsErrorOccurred+0x1bc>)
 800327a:	400b      	ands	r3, r1
 800327c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3728      	adds	r7, #40	; 0x28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	fe00e800 	.word	0xfe00e800

080032b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	4613      	mov	r3, r2
 80032c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c6:	897b      	ldrh	r3, [r7, #10]
 80032c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032cc:	7a7b      	ldrb	r3, [r7, #9]
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	4313      	orrs	r3, r2
 80032de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	0d5b      	lsrs	r3, r3, #21
 80032ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <I2C_TransferConfig+0x60>)
 80032f4:	430b      	orrs	r3, r1
 80032f6:	43db      	mvns	r3, r3
 80032f8:	ea02 0103 	and.w	r1, r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	03ff63ff 	.word	0x03ff63ff

08003318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b20      	cmp	r3, #32
 800332c:	d138      	bne.n	80033a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003338:	2302      	movs	r3, #2
 800333a:	e032      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d139      	bne.n	8003438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e033      	b.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2224      	movs	r2, #36	; 0x24
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800346a:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003476:	f7fe ff43 	bl	8002300 <HAL_GetTick>
 800347a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800347c:	e009      	b.n	8003492 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800347e:	f7fe ff3f 	bl	8002300 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800348c:	d901      	bls.n	8003492 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e022      	b.n	80034d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d1ee      	bne.n	800347e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ac:	f7fe ff28 	bl	8002300 <HAL_GetTick>
 80034b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034b2:	e009      	b.n	80034c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034b4:	f7fe ff24 	bl	8002300 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c2:	d901      	bls.n	80034c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e007      	b.n	80034d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d4:	d1ee      	bne.n	80034b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40007000 	.word	0x40007000

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e291      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8087 	beq.w	800361a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800350c:	4b96      	ldr	r3, [pc, #600]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b04      	cmp	r3, #4
 8003516:	d00c      	beq.n	8003532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003518:	4b93      	ldr	r3, [pc, #588]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b08      	cmp	r3, #8
 8003522:	d112      	bne.n	800354a <HAL_RCC_OscConfig+0x62>
 8003524:	4b90      	ldr	r3, [pc, #576]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003530:	d10b      	bne.n	800354a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003532:	4b8d      	ldr	r3, [pc, #564]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d06c      	beq.n	8003618 <HAL_RCC_OscConfig+0x130>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d168      	bne.n	8003618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e26b      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x7a>
 8003554:	4b84      	ldr	r3, [pc, #528]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a83      	ldr	r2, [pc, #524]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800355a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	e02e      	b.n	80035c0 <HAL_RCC_OscConfig+0xd8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x9c>
 800356a:	4b7f      	ldr	r3, [pc, #508]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7e      	ldr	r2, [pc, #504]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7b      	ldr	r2, [pc, #492]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800357c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xd8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0xc0>
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a75      	ldr	r2, [pc, #468]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b73      	ldr	r3, [pc, #460]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a72      	ldr	r2, [pc, #456]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xd8>
 80035a8:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a6b      	ldr	r2, [pc, #428]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fe9a 	bl	8002300 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fe96 	bl	8002300 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e21f      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b61      	ldr	r3, [pc, #388]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe8>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fe86 	bl	8002300 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fe82 	bl	8002300 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e20b      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b57      	ldr	r3, [pc, #348]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x110>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d069      	beq.n	80036fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003626:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b4d      	ldr	r3, [pc, #308]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b08      	cmp	r3, #8
 800363c:	d11c      	bne.n	8003678 <HAL_RCC_OscConfig+0x190>
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x17a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1df      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	493d      	ldr	r1, [pc, #244]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	e040      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d023      	beq.n	80036c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a38      	ldr	r2, [pc, #224]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fe38 	bl	8002300 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe fe34 	bl	8002300 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e1bd      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4929      	ldr	r1, [pc, #164]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
 80036c6:	e018      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a26      	ldr	r2, [pc, #152]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fe14 	bl	8002300 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036dc:	f7fe fe10 	bl	8002300 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e199      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d038      	beq.n	8003778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d019      	beq.n	8003742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003712:	4a15      	ldr	r2, [pc, #84]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fe fdf1 	bl	8002300 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7fe fded 	bl	8002300 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e176      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x23a>
 8003740:	e01a      	b.n	8003778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374e:	f7fe fdd7 	bl	8002300 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003756:	f7fe fdd3 	bl	8002300 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d903      	bls.n	800376c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e15c      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
 8003768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800376e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ee      	bne.n	8003756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a4 	beq.w	80038ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b8b      	ldr	r3, [pc, #556]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a87      	ldr	r2, [pc, #540]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ae:	4b82      	ldr	r3, [pc, #520]	; (80039b8 <HAL_RCC_OscConfig+0x4d0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037ba:	4b7f      	ldr	r3, [pc, #508]	; (80039b8 <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7e      	ldr	r2, [pc, #504]	; (80039b8 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fd9b 	bl	8002300 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fe fd97 	bl	8002300 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	; 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e120      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e0:	4b75      	ldr	r3, [pc, #468]	; (80039b8 <HAL_RCC_OscConfig+0x4d0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x31a>
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	e02d      	b.n	800385e <HAL_RCC_OscConfig+0x376>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x33c>
 800380a:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a69      	ldr	r2, [pc, #420]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	4b67      	ldr	r3, [pc, #412]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	4a66      	ldr	r2, [pc, #408]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6713      	str	r3, [r2, #112]	; 0x70
 8003822:	e01c      	b.n	800385e <HAL_RCC_OscConfig+0x376>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d10c      	bne.n	8003846 <HAL_RCC_OscConfig+0x35e>
 800382c:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a60      	ldr	r2, [pc, #384]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	4b5e      	ldr	r3, [pc, #376]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a5d      	ldr	r2, [pc, #372]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	e00b      	b.n	800385e <HAL_RCC_OscConfig+0x376>
 8003846:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a5a      	ldr	r2, [pc, #360]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
 8003852:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a57      	ldr	r2, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d015      	beq.n	8003892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fe fd4b 	bl	8002300 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fd47 	bl	8002300 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0ce      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ee      	beq.n	800386e <HAL_RCC_OscConfig+0x386>
 8003890:	e014      	b.n	80038bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe fd35 	bl	8002300 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe fd31 	bl	8002300 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b0:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ee      	bne.n	800389a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a3b      	ldr	r2, [pc, #236]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80a4 	beq.w	8003a20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d8:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d06b      	beq.n	80039bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d149      	bne.n	8003980 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fd02 	bl	8002300 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fcfe 	bl	8002300 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e087      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	4313      	orrs	r3, r2
 8003944:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800394a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe fcd2 	bl	8002300 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe fcce 	bl	8002300 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e057      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x478>
 800397e:	e04f      	b.n	8003a20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800398a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe fcb8 	bl	8002300 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003994:	f7fe fcb4 	bl	8002300 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e03d      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RCC_OscConfig+0x4cc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x4ac>
 80039b2:	e035      	b.n	8003a20 <HAL_RCC_OscConfig+0x538>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCC_OscConfig+0x544>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d028      	beq.n	8003a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d121      	bne.n	8003a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11a      	bne.n	8003a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ec:	4013      	ands	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	3b01      	subs	r3, #1
 8003a06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0d0      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b67      	ldr	r3, [pc, #412]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	4965      	ldr	r1, [pc, #404]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d040      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e073      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06b      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4936      	ldr	r1, [pc, #216]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fe fbec 	bl	8002300 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fe fbe8 	bl	8002300 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e053      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d210      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 020f 	bic.w	r2, r3, #15
 8003b6a:	4922      	ldr	r1, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 f821 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490a      	ldr	r1, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x1cc>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1d0>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1d4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fa9e 	bl	8002124 <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	080088c8 	.word	0x080088c8
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c0c:	b090      	sub	sp, #64	; 0x40
 8003c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
 8003c14:	2300      	movs	r3, #0
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c18:	2300      	movs	r3, #0
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c20:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d00d      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x40>
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	f200 80a1 	bhi.w	8003d74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x34>
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c3a:	e09b      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c3c:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c40:	e09b      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c42:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c46:	e098      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c52:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d028      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	2200      	movs	r2, #0
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	627a      	str	r2, [r7, #36]	; 0x24
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c70:	2100      	movs	r1, #0
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c74:	fb03 f201 	mul.w	r2, r3, r1
 8003c78:	2300      	movs	r3, #0
 8003c7a:	fb00 f303 	mul.w	r3, r0, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	4a43      	ldr	r2, [pc, #268]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c82:	fba0 1202 	umull	r1, r2, r0, r2
 8003c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c88:	460a      	mov	r2, r1
 8003c8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8e:	4413      	add	r3, r2
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	2200      	movs	r2, #0
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	61fa      	str	r2, [r7, #28]
 8003c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ca2:	f7fc ffc1 	bl	8000c28 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4613      	mov	r3, r2
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cae:	e053      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	617a      	str	r2, [r7, #20]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cc2:	f04f 0b00 	mov.w	fp, #0
 8003cc6:	4652      	mov	r2, sl
 8003cc8:	465b      	mov	r3, fp
 8003cca:	f04f 0000 	mov.w	r0, #0
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	0159      	lsls	r1, r3, #5
 8003cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd8:	0150      	lsls	r0, r2, #5
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	ebb2 080a 	subs.w	r8, r2, sl
 8003ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cfa:	ebb2 0408 	subs.w	r4, r2, r8
 8003cfe:	eb63 0509 	sbc.w	r5, r3, r9
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	00eb      	lsls	r3, r5, #3
 8003d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d10:	00e2      	lsls	r2, r4, #3
 8003d12:	4614      	mov	r4, r2
 8003d14:	461d      	mov	r5, r3
 8003d16:	eb14 030a 	adds.w	r3, r4, sl
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	eb45 030b 	adc.w	r3, r5, fp
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	028b      	lsls	r3, r1, #10
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d38:	4621      	mov	r1, r4
 8003d3a:	028a      	lsls	r2, r1, #10
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	2200      	movs	r2, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d4c:	f7fc ff6c 	bl	8000c28 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3740      	adds	r7, #64	; 0x40
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	017d7840 	.word	0x017d7840

08003d94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000000 	.word	0x20000000

08003dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0b5b      	lsrs	r3, r3, #13
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	080088d8 	.word	0x080088d8

08003dd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	220f      	movs	r2, #15
 8003de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003de4:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0203 	and.w	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCC_GetClockConfig+0x5c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	08db      	lsrs	r3, r3, #3
 8003e0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_RCC_GetClockConfig+0x60>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 020f 	and.w	r2, r3, #15
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40023c00 	.word	0x40023c00

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d012      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e60:	4b69      	ldr	r3, [pc, #420]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a68      	ldr	r2, [pc, #416]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e6a:	6093      	str	r3, [r2, #8]
 8003e6c:	4b66      	ldr	r3, [pc, #408]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	4964      	ldr	r1, [pc, #400]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d017      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e92:	4b5d      	ldr	r3, [pc, #372]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	4959      	ldr	r1, [pc, #356]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d017      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ece:	4b4e      	ldr	r3, [pc, #312]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	494a      	ldr	r1, [pc, #296]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 808b 	beq.w	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f1c:	4b3a      	ldr	r3, [pc, #232]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a39      	ldr	r2, [pc, #228]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
 8003f28:	4b37      	ldr	r3, [pc, #220]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f34:	4b35      	ldr	r3, [pc, #212]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a34      	ldr	r2, [pc, #208]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fe f9de 	bl	8002300 <HAL_GetTick>
 8003f44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f48:	f7fe f9da 	bl	8002300 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e357      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f5a:	4b2c      	ldr	r3, [pc, #176]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f66:	4b28      	ldr	r3, [pc, #160]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d035      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d02e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f84:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a1a      	ldr	r2, [pc, #104]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fa6:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fac:	4b16      	ldr	r3, [pc, #88]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d114      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fe f9a2 	bl	8002300 <HAL_GetTick>
 8003fbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc0:	f7fe f99e 	bl	8002300 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e319      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0ee      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fee:	d111      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ffe:	400b      	ands	r3, r1
 8004000:	4901      	ldr	r1, [pc, #4]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
 8004006:	e00b      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004008:	40023800 	.word	0x40023800
 800400c:	40007000 	.word	0x40007000
 8004010:	0ffffcff 	.word	0x0ffffcff
 8004014:	4baa      	ldr	r3, [pc, #680]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4aa9      	ldr	r2, [pc, #676]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	4ba7      	ldr	r3, [pc, #668]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402c:	49a4      	ldr	r1, [pc, #656]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402e:	4313      	orrs	r3, r2
 8004030:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	d010      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800403e:	4ba0      	ldr	r3, [pc, #640]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004044:	4a9e      	ldr	r2, [pc, #632]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800404e:	4b9c      	ldr	r3, [pc, #624]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004050:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	4999      	ldr	r1, [pc, #612]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800406c:	4b94      	ldr	r3, [pc, #592]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800407a:	4991      	ldr	r1, [pc, #580]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800408e:	4b8c      	ldr	r3, [pc, #560]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800409c:	4988      	ldr	r1, [pc, #544]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b0:	4b83      	ldr	r3, [pc, #524]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040be:	4980      	ldr	r1, [pc, #512]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d2:	4b7b      	ldr	r3, [pc, #492]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4977      	ldr	r1, [pc, #476]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f4:	4b72      	ldr	r3, [pc, #456]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f023 0203 	bic.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	496f      	ldr	r1, [pc, #444]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004116:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f023 020c 	bic.w	r2, r3, #12
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	4966      	ldr	r1, [pc, #408]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	495e      	ldr	r1, [pc, #376]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800415a:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	4955      	ldr	r1, [pc, #340]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800417c:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	494d      	ldr	r1, [pc, #308]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800419e:	4b48      	ldr	r3, [pc, #288]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	4944      	ldr	r1, [pc, #272]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041c0:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	493c      	ldr	r1, [pc, #240]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041e2:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f0:	4933      	ldr	r1, [pc, #204]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004204:	4b2e      	ldr	r3, [pc, #184]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004212:	492b      	ldr	r1, [pc, #172]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d011      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004226:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004234:	4922      	ldr	r1, [pc, #136]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004244:	d101      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004256:	2301      	movs	r3, #1
 8004258:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004266:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004274:	4912      	ldr	r1, [pc, #72]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004298:	4909      	ldr	r1, [pc, #36]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d006      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80d9 	beq.w	8004466 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042b4:	4b02      	ldr	r3, [pc, #8]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a01      	ldr	r2, [pc, #4]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c6:	f7fe f81b 	bl	8002300 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042ce:	f7fe f817 	bl	8002300 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b64      	cmp	r3, #100	; 0x64
 80042da:	d901      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e194      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e0:	4b6c      	ldr	r3, [pc, #432]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d021      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11d      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004300:	4b64      	ldr	r3, [pc, #400]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800430e:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004314:	0e1b      	lsrs	r3, r3, #24
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	019a      	lsls	r2, r3, #6
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	071b      	lsls	r3, r3, #28
 8004334:	4957      	ldr	r1, [pc, #348]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02e      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004366:	d129      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004368:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	0c1b      	lsrs	r3, r3, #16
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	0f1b      	lsrs	r3, r3, #28
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	019a      	lsls	r2, r3, #6
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	431a      	orrs	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	071b      	lsls	r3, r3, #28
 800439c:	493d      	ldr	r1, [pc, #244]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043a4:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043aa:	f023 021f 	bic.w	r2, r3, #31
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	3b01      	subs	r3, #1
 80043b4:	4937      	ldr	r1, [pc, #220]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01d      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	0e1b      	lsrs	r3, r3, #24
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	0f1b      	lsrs	r3, r3, #28
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	019a      	lsls	r2, r3, #6
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	431a      	orrs	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	071b      	lsls	r3, r3, #28
 80043fc:	4925      	ldr	r1, [pc, #148]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d011      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	019a      	lsls	r2, r3, #6
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	071b      	lsls	r3, r3, #28
 800442c:	4919      	ldr	r1, [pc, #100]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004434:	4b17      	ldr	r3, [pc, #92]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a16      	ldr	r2, [pc, #88]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800443e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fd ff5e 	bl	8002300 <HAL_GetTick>
 8004444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004448:	f7fd ff5a 	bl	8002300 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	; 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e0d7      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 80cd 	bne.w	8004608 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447a:	f7fd ff41 	bl	8002300 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004482:	f7fd ff3d 	bl	8002300 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b64      	cmp	r3, #100	; 0x64
 800448e:	d903      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0ba      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004494:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004498:	4b5e      	ldr	r3, [pc, #376]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a4:	d0ed      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d02e      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d12a      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044ce:	4b51      	ldr	r3, [pc, #324]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044dc:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	0f1b      	lsrs	r3, r3, #28
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	019a      	lsls	r2, r3, #6
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	071b      	lsls	r3, r3, #28
 8004502:	4944      	ldr	r1, [pc, #272]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800450a:	4b42      	ldr	r3, [pc, #264]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	493d      	ldr	r1, [pc, #244]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d022      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004538:	d11d      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	0e1b      	lsrs	r3, r3, #24
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	0f1b      	lsrs	r3, r3, #28
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	019a      	lsls	r2, r3, #6
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	431a      	orrs	r2, r3
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	071b      	lsls	r3, r3, #28
 800456e:	4929      	ldr	r1, [pc, #164]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004590:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	4917      	ldr	r1, [pc, #92]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	4911      	ldr	r1, [pc, #68]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fd fe8e 	bl	8002300 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045e8:	f7fd fe8a 	bl	8002300 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e007      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004606:	d1ef      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800

08004618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e049      	b.n	80046be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f841 	bl	80046c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f000 fa00 	bl	8004a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e054      	b.n	800479e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a26      	ldr	r2, [pc, #152]	; (80047ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d01d      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_TIM_Base_Start_IT+0xe0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIM_Base_Start_IT+0x80>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d115      	bne.n	8004788 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_TIM_Base_Start_IT+0xec>)
 8004764:	4013      	ands	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b06      	cmp	r3, #6
 800476c:	d015      	beq.n	800479a <HAL_TIM_Base_Start_IT+0xbe>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d011      	beq.n	800479a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004786:	e008      	b.n	800479a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e000      	b.n	800479c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40001800 	.word	0x40001800
 80047c8:	00010007 	.word	0x00010007

080047cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d122      	bne.n	8004828 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d11b      	bne.n	8004828 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0202 	mvn.w	r2, #2
 80047f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f905 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 8004814:	e005      	b.n	8004822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f8f7 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f908 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b04      	cmp	r3, #4
 8004834:	d122      	bne.n	800487c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b04      	cmp	r3, #4
 8004842:	d11b      	bne.n	800487c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0204 	mvn.w	r2, #4
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8db 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8cd 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f8de 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b08      	cmp	r3, #8
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b08      	cmp	r3, #8
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0208 	mvn.w	r2, #8
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2204      	movs	r2, #4
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8b1 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8a3 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8b4 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d122      	bne.n	8004924 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d11b      	bne.n	8004924 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0210 	mvn.w	r2, #16
 80048f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2208      	movs	r2, #8
 80048fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f887 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f879 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f88a 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d10e      	bne.n	8004950 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0201 	mvn.w	r2, #1
 8004948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd fb4c 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d10e      	bne.n	800497c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d107      	bne.n	800497c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f91a 	bl	8004bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498a:	d10e      	bne.n	80049aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d107      	bne.n	80049aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f90d 	bl	8004bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d10e      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d107      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f838 	bl	8004a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d10e      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d107      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0220 	mvn.w	r2, #32
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8cd 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a40      	ldr	r2, [pc, #256]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d00f      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <TIM_Base_SetConfig+0x118>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a3c      	ldr	r2, [pc, #240]	; (8004b78 <TIM_Base_SetConfig+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3b      	ldr	r2, [pc, #236]	; (8004b7c <TIM_Base_SetConfig+0x120>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d108      	bne.n	8004aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d02b      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abc:	d027      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <TIM_Base_SetConfig+0x118>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d023      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2b      	ldr	r2, [pc, #172]	; (8004b78 <TIM_Base_SetConfig+0x11c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01f      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <TIM_Base_SetConfig+0x120>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01b      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d017      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <TIM_Base_SetConfig+0x128>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <TIM_Base_SetConfig+0x12c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00f      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <TIM_Base_SetConfig+0x130>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <TIM_Base_SetConfig+0x134>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <TIM_Base_SetConfig+0x138>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <TIM_Base_SetConfig+0x13c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d103      	bne.n	8004b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	615a      	str	r2, [r3, #20]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40010400 	.word	0x40010400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800
 8004b90:	40001800 	.word	0x40001800
 8004b94:	40001c00 	.word	0x40001c00
 8004b98:	40002000 	.word	0x40002000

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bee:	f3ef 8305 	mrs	r3, IPSR
 8004bf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfe:	607b      	str	r3, [r7, #4]
  return(result);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c06:	f3ef 8311 	mrs	r3, BASEPRI
 8004c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <osKernelInitialize+0x3a>
 8004c12:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <osKernelInitialize+0x64>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d103      	bne.n	8004c22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c1a:	f06f 0305 	mvn.w	r3, #5
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e00c      	b.n	8004c3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <osKernelInitialize+0x64>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <osKernelInitialize+0x64>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e002      	b.n	8004c3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000190 	.word	0x20000190

08004c50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c56:	f3ef 8305 	mrs	r3, IPSR
 8004c5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c62:	f3ef 8310 	mrs	r3, PRIMASK
 8004c66:	607b      	str	r3, [r7, #4]
  return(result);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c72:	603b      	str	r3, [r7, #0]
  return(result);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <osKernelStart+0x3a>
 8004c7a:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <osKernelStart+0x68>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d103      	bne.n	8004c8a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c82:	f06f 0305 	mvn.w	r3, #5
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e010      	b.n	8004cac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <osKernelStart+0x68>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d109      	bne.n	8004ca6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c92:	f7ff ffa1 	bl	8004bd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <osKernelStart+0x68>)
 8004c98:	2202      	movs	r2, #2
 8004c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c9c:	f001 f8ca 	bl	8005e34 <vTaskStartScheduler>
      stat = osOK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e002      	b.n	8004cac <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000190 	.word	0x20000190

08004cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b090      	sub	sp, #64	; 0x40
 8004cc0:	af04      	add	r7, sp, #16
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ccc:	f3ef 8305 	mrs	r3, IPSR
 8004cd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cd2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f040 808f 	bne.w	8004df8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cda:	f3ef 8310 	mrs	r3, PRIMASK
 8004cde:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cea:	617b      	str	r3, [r7, #20]
  return(result);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <osThreadNew+0x3e>
 8004cf2:	4b44      	ldr	r3, [pc, #272]	; (8004e04 <osThreadNew+0x148>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d07e      	beq.n	8004df8 <osThreadNew+0x13c>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d07b      	beq.n	8004df8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004d04:	2318      	movs	r3, #24
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d045      	beq.n	8004da4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <osThreadNew+0x6a>
        name = attr->name;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <osThreadNew+0x90>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	2b38      	cmp	r3, #56	; 0x38
 8004d3e:	d805      	bhi.n	8004d4c <osThreadNew+0x90>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <osThreadNew+0x94>
        return (NULL);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e054      	b.n	8004dfa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00e      	beq.n	8004d86 <osThreadNew+0xca>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2bbb      	cmp	r3, #187	; 0xbb
 8004d6e:	d90a      	bls.n	8004d86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d006      	beq.n	8004d86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <osThreadNew+0xca>
        mem = 1;
 8004d80:	2301      	movs	r3, #1
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	e010      	b.n	8004da8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10c      	bne.n	8004da8 <osThreadNew+0xec>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d108      	bne.n	8004da8 <osThreadNew+0xec>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <osThreadNew+0xec>
          mem = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	e001      	b.n	8004da8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d110      	bne.n	8004dd0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004db6:	9202      	str	r2, [sp, #8]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fe3f 	bl	8005a48 <xTaskCreateStatic>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e013      	b.n	8004df8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d110      	bne.n	8004df8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	f107 0310 	add.w	r3, r7, #16
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fe90 	bl	8005b0e <xTaskCreate>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d001      	beq.n	8004df8 <osThreadNew+0x13c>
          hTask = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004df8:	693b      	ldr	r3, [r7, #16]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3730      	adds	r7, #48	; 0x30
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000190 	.word	0x20000190

08004e08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e10:	f3ef 8305 	mrs	r3, IPSR
 8004e14:	613b      	str	r3, [r7, #16]
  return(result);
 8004e16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10f      	bne.n	8004e3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e28:	f3ef 8311 	mrs	r3, BASEPRI
 8004e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <osDelay+0x3c>
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <osDelay+0x58>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d103      	bne.n	8004e44 <osDelay+0x3c>
    stat = osErrorISR;
 8004e3c:	f06f 0305 	mvn.w	r3, #5
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e007      	b.n	8004e54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 ffba 	bl	8005dc8 <vTaskDelay>
    }
  }

  return (stat);
 8004e54:	697b      	ldr	r3, [r7, #20]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000190 	.word	0x20000190

08004e64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a07      	ldr	r2, [pc, #28]	; (8004e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a06      	ldr	r2, [pc, #24]	; (8004e94 <vApplicationGetIdleTaskMemory+0x30>)
 8004e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2280      	movs	r2, #128	; 0x80
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000194 	.word	0x20000194
 8004e94:	20000250 	.word	0x20000250

08004e98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a07      	ldr	r2, [pc, #28]	; (8004ec4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a06      	ldr	r2, [pc, #24]	; (8004ec8 <vApplicationGetTimerTaskMemory+0x30>)
 8004eae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eb6:	601a      	str	r2, [r3, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20000450 	.word	0x20000450
 8004ec8:	2000050c 	.word	0x2000050c

08004ecc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f103 0208 	add.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f103 0208 	add.w	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f103 0208 	add.w	r2, r3, #8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d103      	bne.n	8004f8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e00c      	b.n	8004fa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3308      	adds	r3, #8
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e002      	b.n	8004f9c <vListInsert+0x2e>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d2f6      	bcs.n	8004f96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6892      	ldr	r2, [r2, #8]
 8004ff6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6852      	ldr	r2, [r2, #4]
 8005000:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d103      	bne.n	8005014 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10c      	bne.n	8005062 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	b672      	cpsid	i
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	b662      	cpsie	i
 800505c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005062:	f002 f8a3 	bl	80071ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	441a      	add	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	3b01      	subs	r3, #1
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	441a      	add	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	22ff      	movs	r2, #255	; 0xff
 80050ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d114      	bne.n	80050e2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01a      	beq.n	80050f6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3310      	adds	r3, #16
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f95d 	bl	8006384 <xTaskRemoveFromEventList>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d012      	beq.n	80050f6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <xQueueGenericReset+0xd0>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	e009      	b.n	80050f6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3310      	adds	r3, #16
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fef0 	bl	8004ecc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3324      	adds	r3, #36	; 0x24
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff feeb 	bl	8004ecc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050f6:	f002 f88d 	bl	8007214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050fa:	2301      	movs	r3, #1
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08e      	sub	sp, #56	; 0x38
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10c      	bne.n	8005136 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	b672      	cpsid	i
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	b662      	cpsie	i
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10c      	bne.n	8005156 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	b672      	cpsid	i
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	b662      	cpsie	i
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <xQueueGenericCreateStatic+0x5a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <xQueueGenericCreateStatic+0x5e>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <xQueueGenericCreateStatic+0x60>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10c      	bne.n	8005186 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	b672      	cpsid	i
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	b662      	cpsie	i
 8005180:	623b      	str	r3, [r7, #32]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <xQueueGenericCreateStatic+0x8a>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <xQueueGenericCreateStatic+0x8e>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <xQueueGenericCreateStatic+0x90>
 8005196:	2300      	movs	r3, #0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10c      	bne.n	80051b6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	b672      	cpsid	i
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	b662      	cpsie	i
 80051b0:	61fb      	str	r3, [r7, #28]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051b6:	2350      	movs	r3, #80	; 0x50
 80051b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b50      	cmp	r3, #80	; 0x50
 80051be:	d00c      	beq.n	80051da <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	b672      	cpsid	i
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	b662      	cpsie	i
 80051d4:	61bb      	str	r3, [r7, #24]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f805 	bl	800520c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005204:	4618      	mov	r0, r3
 8005206:	3730      	adds	r7, #48	; 0x30
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e002      	b.n	800522e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800523a:	2101      	movs	r1, #1
 800523c:	69b8      	ldr	r0, [r7, #24]
 800523e:	f7ff fef9 	bl	8005034 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08e      	sub	sp, #56	; 0x38
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005262:	2300      	movs	r3, #0
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10c      	bne.n	800528a <xQueueGenericSend+0x36>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	b672      	cpsid	i
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	b662      	cpsie	i
 8005284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <xQueueGenericSend+0x44>
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <xQueueGenericSend+0x48>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <xQueueGenericSend+0x4a>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10c      	bne.n	80052bc <xQueueGenericSend+0x68>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	b672      	cpsid	i
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	b662      	cpsie	i
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d103      	bne.n	80052ca <xQueueGenericSend+0x76>
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <xQueueGenericSend+0x7a>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <xQueueGenericSend+0x7c>
 80052ce:	2300      	movs	r3, #0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10c      	bne.n	80052ee <xQueueGenericSend+0x9a>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	b672      	cpsid	i
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	b662      	cpsie	i
 80052e8:	623b      	str	r3, [r7, #32]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052ee:	f001 fa13 	bl	8006718 <xTaskGetSchedulerState>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <xQueueGenericSend+0xaa>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <xQueueGenericSend+0xae>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <xQueueGenericSend+0xb0>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10c      	bne.n	8005322 <xQueueGenericSend+0xce>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	b672      	cpsid	i
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	b662      	cpsie	i
 800531c:	61fb      	str	r3, [r7, #28]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005322:	f001 ff43 	bl	80071ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <xQueueGenericSend+0xe4>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d129      	bne.n	800538c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533e:	f000 fa15 	bl	800576c <prvCopyDataToQueue>
 8005342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	3324      	adds	r3, #36	; 0x24
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f817 	bl	8006384 <xTaskRemoveFromEventList>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800535c:	4b3f      	ldr	r3, [pc, #252]	; (800545c <xQueueGenericSend+0x208>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	e00a      	b.n	8005384 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005374:	4b39      	ldr	r3, [pc, #228]	; (800545c <xQueueGenericSend+0x208>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005384:	f001 ff46 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 8005388:	2301      	movs	r3, #1
 800538a:	e063      	b.n	8005454 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005392:	f001 ff3f 	bl	8007214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005396:	2300      	movs	r3, #0
 8005398:	e05c      	b.n	8005454 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	4618      	mov	r0, r3
 80053a6:	f001 f853 	bl	8006450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ae:	f001 ff31 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053b2:	f000 fdb3 	bl	8005f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053b6:	f001 fef9 	bl	80071ac <vPortEnterCritical>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d103      	bne.n	80053d0 <xQueueGenericSend+0x17c>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d103      	bne.n	80053e6 <xQueueGenericSend+0x192>
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e6:	f001 ff15 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053ea:	1d3a      	adds	r2, r7, #4
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 f842 	bl	800647c <xTaskCheckForTimeOut>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d124      	bne.n	8005448 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005400:	f000 faac 	bl	800595c <prvIsQueueFull>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d018      	beq.n	800543c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	3310      	adds	r3, #16
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ff62 	bl	80062dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541a:	f000 fa37 	bl	800588c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800541e:	f000 fd8b 	bl	8005f38 <xTaskResumeAll>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	f47f af7c 	bne.w	8005322 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <xQueueGenericSend+0x208>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	e772      	b.n	8005322 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800543c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543e:	f000 fa25 	bl	800588c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005442:	f000 fd79 	bl	8005f38 <xTaskResumeAll>
 8005446:	e76c      	b.n	8005322 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544a:	f000 fa1f 	bl	800588c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800544e:	f000 fd73 	bl	8005f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005454:	4618      	mov	r0, r3
 8005456:	3738      	adds	r7, #56	; 0x38
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	; 0x38
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10c      	bne.n	8005492 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	b672      	cpsid	i
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	b662      	cpsie	i
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <xQueueGenericSendFromISR+0x40>
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <xQueueGenericSendFromISR+0x44>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <xQueueGenericSendFromISR+0x46>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10c      	bne.n	80054c4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	b672      	cpsid	i
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	b662      	cpsie	i
 80054be:	623b      	str	r3, [r7, #32]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d103      	bne.n	80054d2 <xQueueGenericSendFromISR+0x72>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <xQueueGenericSendFromISR+0x76>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <xQueueGenericSendFromISR+0x78>
 80054d6:	2300      	movs	r3, #0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10c      	bne.n	80054f6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	b672      	cpsid	i
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	b662      	cpsie	i
 80054f0:	61fb      	str	r3, [r7, #28]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054f6:	f001 ff41 	bl	800737c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054fa:	f3ef 8211 	mrs	r2, BASEPRI
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	b672      	cpsid	i
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	b662      	cpsie	i
 8005512:	61ba      	str	r2, [r7, #24]
 8005514:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005516:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <xQueueGenericSendFromISR+0xcc>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d12c      	bne.n	8005586 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553c:	f000 f916 	bl	800576c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005540:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d112      	bne.n	8005570 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d016      	beq.n	8005580 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	3324      	adds	r3, #36	; 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f000 ff14 	bl	8006384 <xTaskRemoveFromEventList>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00e      	beq.n	8005580 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e007      	b.n	8005580 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005574:	3301      	adds	r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	b25a      	sxtb	r2, r3
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005584:	e001      	b.n	800558a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005586:	2300      	movs	r3, #0
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005594:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005598:	4618      	mov	r0, r3
 800559a:	3738      	adds	r7, #56	; 0x38
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <xQueueReceive+0x34>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	b672      	cpsid	i
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	b662      	cpsie	i
 80055ce:	623b      	str	r3, [r7, #32]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <xQueueReceive+0x42>
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <xQueueReceive+0x46>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueReceive+0x48>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10c      	bne.n	8005606 <xQueueReceive+0x66>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	61fb      	str	r3, [r7, #28]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005606:	f001 f887 	bl	8006718 <xTaskGetSchedulerState>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <xQueueReceive+0x76>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueReceive+0x7a>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueReceive+0x7c>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10c      	bne.n	800563a <xQueueReceive+0x9a>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	b672      	cpsid	i
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	b662      	cpsie	i
 8005634:	61bb      	str	r3, [r7, #24]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800563a:	f001 fdb7 	bl	80071ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01f      	beq.n	800568a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564e:	f000 f8f7 	bl	8005840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00f      	beq.n	8005682 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	3310      	adds	r3, #16
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fe8c 	bl	8006384 <xTaskRemoveFromEventList>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005672:	4b3d      	ldr	r3, [pc, #244]	; (8005768 <xQueueReceive+0x1c8>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005682:	f001 fdc7 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 8005686:	2301      	movs	r3, #1
 8005688:	e069      	b.n	800575e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005690:	f001 fdc0 	bl	8007214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005694:	2300      	movs	r3, #0
 8005696:	e062      	b.n	800575e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800569e:	f107 0310 	add.w	r3, r7, #16
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fed4 	bl	8006450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056ac:	f001 fdb2 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056b0:	f000 fc34 	bl	8005f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056b4:	f001 fd7a 	bl	80071ac <vPortEnterCritical>
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d103      	bne.n	80056ce <xQueueReceive+0x12e>
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d4:	b25b      	sxtb	r3, r3
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d103      	bne.n	80056e4 <xQueueReceive+0x144>
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e4:	f001 fd96 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056e8:	1d3a      	adds	r2, r7, #4
 80056ea:	f107 0310 	add.w	r3, r7, #16
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fec3 	bl	800647c <xTaskCheckForTimeOut>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d123      	bne.n	8005744 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fe:	f000 f917 	bl	8005930 <prvIsQueueEmpty>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d017      	beq.n	8005738 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	3324      	adds	r3, #36	; 0x24
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fde3 	bl	80062dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005718:	f000 f8b8 	bl	800588c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800571c:	f000 fc0c 	bl	8005f38 <xTaskResumeAll>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d189      	bne.n	800563a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <xQueueReceive+0x1c8>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	e780      	b.n	800563a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573a:	f000 f8a7 	bl	800588c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800573e:	f000 fbfb 	bl	8005f38 <xTaskResumeAll>
 8005742:	e77a      	b.n	800563a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005746:	f000 f8a1 	bl	800588c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800574a:	f000 fbf5 	bl	8005f38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800574e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005750:	f000 f8ee 	bl	8005930 <prvIsQueueEmpty>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	f43f af6f 	beq.w	800563a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800575c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800575e:	4618      	mov	r0, r3
 8005760:	3730      	adds	r7, #48	; 0x30
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d14d      	bne.n	800582e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ffdc 	bl	8006754 <xTaskPriorityDisinherit>
 800579c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	e043      	b.n	800582e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d119      	bne.n	80057e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6858      	ldr	r0, [r3, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	461a      	mov	r2, r3
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	f002 f834 	bl	8007824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	441a      	add	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d32b      	bcc.n	800582e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	e026      	b.n	800582e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68d8      	ldr	r0, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	461a      	mov	r2, r3
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	f002 f81a 	bl	8007824 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	425b      	negs	r3, r3
 80057fa:	441a      	add	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d207      	bcs.n	800581c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	425b      	negs	r3, r3
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d105      	bne.n	800582e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	3b01      	subs	r3, #1
 800582c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005836:	697b      	ldr	r3, [r7, #20]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d018      	beq.n	8005884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	441a      	add	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	d303      	bcc.n	8005874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68d9      	ldr	r1, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	461a      	mov	r2, r3
 800587e:	6838      	ldr	r0, [r7, #0]
 8005880:	f001 ffd0 	bl	8007824 <memcpy>
	}
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005894:	f001 fc8a 	bl	80071ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a0:	e011      	b.n	80058c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d012      	beq.n	80058d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3324      	adds	r3, #36	; 0x24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fd68 	bl	8006384 <xTaskRemoveFromEventList>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058ba:	f000 fe45 	bl	8006548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dce9      	bgt.n	80058a2 <prvUnlockQueue+0x16>
 80058ce:	e000      	b.n	80058d2 <prvUnlockQueue+0x46>
					break;
 80058d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058da:	f001 fc9b 	bl	8007214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058de:	f001 fc65 	bl	80071ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ea:	e011      	b.n	8005910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d012      	beq.n	800591a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3310      	adds	r3, #16
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fd43 	bl	8006384 <xTaskRemoveFromEventList>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005904:	f000 fe20 	bl	8006548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	3b01      	subs	r3, #1
 800590c:	b2db      	uxtb	r3, r3
 800590e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005914:	2b00      	cmp	r3, #0
 8005916:	dce9      	bgt.n	80058ec <prvUnlockQueue+0x60>
 8005918:	e000      	b.n	800591c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800591a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005924:	f001 fc76 	bl	8007214 <vPortExitCritical>
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005938:	f001 fc38 	bl	80071ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e001      	b.n	800594e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800594e:	f001 fc61 	bl	8007214 <vPortExitCritical>

	return xReturn;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005964:	f001 fc22 	bl	80071ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	429a      	cmp	r2, r3
 8005972:	d102      	bne.n	800597a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	e001      	b.n	800597e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800597e:	f001 fc49 	bl	8007214 <vPortExitCritical>

	return xReturn;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e014      	b.n	80059c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800599c:	4a0f      	ldr	r2, [pc, #60]	; (80059dc <vQueueAddToRegistry+0x50>)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059a8:	490c      	ldr	r1, [pc, #48]	; (80059dc <vQueueAddToRegistry+0x50>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059b2:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <vQueueAddToRegistry+0x50>)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059be:	e006      	b.n	80059ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b07      	cmp	r3, #7
 80059ca:	d9e7      	bls.n	800599c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	2000090c 	.word	0x2000090c

080059e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059f0:	f001 fbdc 	bl	80071ac <vPortEnterCritical>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059fa:	b25b      	sxtb	r3, r3
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d103      	bne.n	8005a0a <vQueueWaitForMessageRestricted+0x2a>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a10:	b25b      	sxtb	r3, r3
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d103      	bne.n	8005a20 <vQueueWaitForMessageRestricted+0x40>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a20:	f001 fbf8 	bl	8007214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3324      	adds	r3, #36	; 0x24
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fc77 	bl	8006328 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a3a:	6978      	ldr	r0, [r7, #20]
 8005a3c:	f7ff ff26 	bl	800588c <prvUnlockQueue>
	}
 8005a40:	bf00      	nop
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08e      	sub	sp, #56	; 0x38
 8005a4c:	af04      	add	r7, sp, #16
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10c      	bne.n	8005a76 <xTaskCreateStatic+0x2e>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	b672      	cpsid	i
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	b662      	cpsie	i
 8005a70:	623b      	str	r3, [r7, #32]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10c      	bne.n	8005a96 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	b672      	cpsid	i
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	b662      	cpsie	i
 8005a90:	61fb      	str	r3, [r7, #28]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a96:	23bc      	movs	r3, #188	; 0xbc
 8005a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2bbc      	cmp	r3, #188	; 0xbc
 8005a9e:	d00c      	beq.n	8005aba <xTaskCreateStatic+0x72>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	b672      	cpsid	i
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	b662      	cpsie	i
 8005ab4:	61bb      	str	r3, [r7, #24]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005aba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01e      	beq.n	8005b00 <xTaskCreateStatic+0xb8>
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ada:	2300      	movs	r3, #0
 8005adc:	9303      	str	r3, [sp, #12]
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	9302      	str	r3, [sp, #8]
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f850 	bl	8005b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005afa:	f000 f8f5 	bl	8005ce8 <prvAddNewTaskToReadyList>
 8005afe:	e001      	b.n	8005b04 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b04:	697b      	ldr	r3, [r7, #20]
	}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3728      	adds	r7, #40	; 0x28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b08c      	sub	sp, #48	; 0x30
 8005b12:	af04      	add	r7, sp, #16
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 fc6e 	bl	8007404 <pvPortMalloc>
 8005b28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00e      	beq.n	8005b4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b30:	20bc      	movs	r0, #188	; 0xbc
 8005b32:	f001 fc67 	bl	8007404 <pvPortMalloc>
 8005b36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
 8005b44:	e005      	b.n	8005b52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b46:	6978      	ldr	r0, [r7, #20]
 8005b48:	f001 fd26 	bl	8007598 <vPortFree>
 8005b4c:	e001      	b.n	8005b52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d017      	beq.n	8005b88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	2300      	movs	r3, #0
 8005b64:	9303      	str	r3, [sp, #12]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f80e 	bl	8005b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b7c:	69f8      	ldr	r0, [r7, #28]
 8005b7e:	f000 f8b3 	bl	8005ce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e002      	b.n	8005b8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b88:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3720      	adds	r7, #32
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	461a      	mov	r2, r3
 8005bb0:	21a5      	movs	r1, #165	; 0xa5
 8005bb2:	f001 fe45 	bl	8007840 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005bc0:	440b      	add	r3, r1
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f023 0307 	bic.w	r3, r3, #7
 8005bce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	b672      	cpsid	i
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	b662      	cpsie	i
 8005bee:	617b      	str	r3, [r7, #20]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01f      	beq.n	8005c3a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e012      	b.n	8005c26 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	7819      	ldrb	r1, [r3, #0]
 8005c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	3334      	adds	r3, #52	; 0x34
 8005c10:	460a      	mov	r2, r1
 8005c12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	3301      	adds	r3, #1
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b0f      	cmp	r3, #15
 8005c2a:	d9e9      	bls.n	8005c00 <prvInitialiseNewTask+0x68>
 8005c2c:	e000      	b.n	8005c30 <prvInitialiseNewTask+0x98>
			{
				break;
 8005c2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	e003      	b.n	8005c42 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	2b37      	cmp	r3, #55	; 0x37
 8005c46:	d901      	bls.n	8005c4c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c48:	2337      	movs	r3, #55	; 0x37
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	3304      	adds	r3, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff f952 	bl	8004f0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff f94d 	bl	8004f0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	3354      	adds	r3, #84	; 0x54
 8005c9c:	2260      	movs	r2, #96	; 0x60
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 fdcd 	bl	8007840 <memset>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <prvInitialiseNewTask+0x144>)
 8005caa:	659a      	str	r2, [r3, #88]	; 0x58
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <prvInitialiseNewTask+0x148>)
 8005cb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ce4 <prvInitialiseNewTask+0x14c>)
 8005cb6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	69b8      	ldr	r0, [r7, #24]
 8005cbe:	f001 f96b 	bl	8006f98 <pxPortInitialiseStack>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd4:	bf00      	nop
 8005cd6:	3720      	adds	r7, #32
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	08008900 	.word	0x08008900
 8005ce0:	08008920 	.word	0x08008920
 8005ce4:	080088e0 	.word	0x080088e0

08005ce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cf0:	f001 fa5c 	bl	80071ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cf4:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <prvAddNewTaskToReadyList+0xc4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <prvAddNewTaskToReadyList+0xc4>)
 8005cfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d0c:	4b27      	ldr	r3, [pc, #156]	; (8005dac <prvAddNewTaskToReadyList+0xc4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d110      	bne.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d14:	f000 fc3c 	bl	8006590 <prvInitialiseTaskLists>
 8005d18:	e00d      	b.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d1a:	4b26      	ldr	r3, [pc, #152]	; (8005db4 <prvAddNewTaskToReadyList+0xcc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d22:	4b23      	ldr	r3, [pc, #140]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d802      	bhi.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d30:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <prvAddNewTaskToReadyList+0xd0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <prvAddNewTaskToReadyList+0xd0>)
 8005d3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <prvAddNewTaskToReadyList+0xd0>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <prvAddNewTaskToReadyList+0xd4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d903      	bls.n	8005d5c <prvAddNewTaskToReadyList+0x74>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <prvAddNewTaskToReadyList+0xd4>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <prvAddNewTaskToReadyList+0xd8>)
 8005d6a:	441a      	add	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7ff f8d7 	bl	8004f26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d78:	f001 fa4c 	bl	8007214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d7c:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <prvAddNewTaskToReadyList+0xcc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d207      	bcs.n	8005da2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <prvAddNewTaskToReadyList+0xdc>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000e20 	.word	0x20000e20
 8005db0:	2000094c 	.word	0x2000094c
 8005db4:	20000e2c 	.word	0x20000e2c
 8005db8:	20000e3c 	.word	0x20000e3c
 8005dbc:	20000e28 	.word	0x20000e28
 8005dc0:	20000950 	.word	0x20000950
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d019      	beq.n	8005e0e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <vTaskDelay+0x64>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <vTaskDelay+0x34>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	b672      	cpsid	i
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	b662      	cpsie	i
 8005df6:	60bb      	str	r3, [r7, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005dfc:	f000 f88e 	bl	8005f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e00:	2100      	movs	r1, #0
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fd18 	bl	8006838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e08:	f000 f896 	bl	8005f38 <xTaskResumeAll>
 8005e0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005e14:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <vTaskDelay+0x68>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000e48 	.word	0x20000e48
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e42:	463a      	mov	r2, r7
 8005e44:	1d39      	adds	r1, r7, #4
 8005e46:	f107 0308 	add.w	r3, r7, #8
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff f80a 	bl	8004e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	9202      	str	r2, [sp, #8]
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	460a      	mov	r2, r1
 8005e62:	4926      	ldr	r1, [pc, #152]	; (8005efc <vTaskStartScheduler+0xc8>)
 8005e64:	4826      	ldr	r0, [pc, #152]	; (8005f00 <vTaskStartScheduler+0xcc>)
 8005e66:	f7ff fdef 	bl	8005a48 <xTaskCreateStatic>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4a25      	ldr	r2, [pc, #148]	; (8005f04 <vTaskStartScheduler+0xd0>)
 8005e6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e70:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <vTaskStartScheduler+0xd0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e001      	b.n	8005e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d102      	bne.n	8005e8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e88:	f000 fd2a 	bl	80068e0 <xTimerCreateTimerTask>
 8005e8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d11d      	bne.n	8005ed0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	b672      	cpsid	i
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	b662      	cpsie	i
 8005ea8:	613b      	str	r3, [r7, #16]
}
 8005eaa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eac:	4b16      	ldr	r3, [pc, #88]	; (8005f08 <vTaskStartScheduler+0xd4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3354      	adds	r3, #84	; 0x54
 8005eb2:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <vTaskStartScheduler+0xd8>)
 8005eb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb6:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <vTaskStartScheduler+0xdc>)
 8005eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <vTaskStartScheduler+0xe0>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ec4:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <vTaskStartScheduler+0xe4>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eca:	f001 f8f1 	bl	80070b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ece:	e010      	b.n	8005ef2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d10c      	bne.n	8005ef2 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	b672      	cpsid	i
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	b662      	cpsie	i
 8005eec:	60fb      	str	r3, [r7, #12]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <vTaskStartScheduler+0xbc>
}
 8005ef2:	bf00      	nop
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	08008844 	.word	0x08008844
 8005f00:	08006561 	.word	0x08006561
 8005f04:	20000e44 	.word	0x20000e44
 8005f08:	2000094c 	.word	0x2000094c
 8005f0c:	20000010 	.word	0x20000010
 8005f10:	20000e40 	.word	0x20000e40
 8005f14:	20000e2c 	.word	0x20000e2c
 8005f18:	20000e24 	.word	0x20000e24

08005f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f20:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <vTaskSuspendAll+0x18>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a03      	ldr	r2, [pc, #12]	; (8005f34 <vTaskSuspendAll+0x18>)
 8005f28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f2a:	bf00      	nop
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000e48 	.word	0x20000e48

08005f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f46:	4b43      	ldr	r3, [pc, #268]	; (8006054 <xTaskResumeAll+0x11c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <xTaskResumeAll+0x30>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	b672      	cpsid	i
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	b662      	cpsie	i
 8005f62:	603b      	str	r3, [r7, #0]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f68:	f001 f920 	bl	80071ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f6c:	4b39      	ldr	r3, [pc, #228]	; (8006054 <xTaskResumeAll+0x11c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	4a38      	ldr	r2, [pc, #224]	; (8006054 <xTaskResumeAll+0x11c>)
 8005f74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f76:	4b37      	ldr	r3, [pc, #220]	; (8006054 <xTaskResumeAll+0x11c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d162      	bne.n	8006044 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f7e:	4b36      	ldr	r3, [pc, #216]	; (8006058 <xTaskResumeAll+0x120>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d05e      	beq.n	8006044 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f86:	e02f      	b.n	8005fe8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <xTaskResumeAll+0x124>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3318      	adds	r3, #24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f823 	bl	8004fe0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff f81e 	bl	8004fe0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <xTaskResumeAll+0x128>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d903      	bls.n	8005fb8 <xTaskResumeAll+0x80>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <xTaskResumeAll+0x128>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <xTaskResumeAll+0x12c>)
 8005fc6:	441a      	add	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f7fe ffa9 	bl	8004f26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4b23      	ldr	r3, [pc, #140]	; (8006068 <xTaskResumeAll+0x130>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <xTaskResumeAll+0x134>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <xTaskResumeAll+0x124>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1cb      	bne.n	8005f88 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ff6:	f000 fb6f 	bl	80066d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <xTaskResumeAll+0x138>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006006:	f000 f847 	bl	8006098 <xTaskIncrementTick>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006010:	4b16      	ldr	r3, [pc, #88]	; (800606c <xTaskResumeAll+0x134>)
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3b01      	subs	r3, #1
 800601a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f1      	bne.n	8006006 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <xTaskResumeAll+0x138>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <xTaskResumeAll+0x134>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006034:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <xTaskResumeAll+0x13c>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006044:	f001 f8e6 	bl	8007214 <vPortExitCritical>

	return xAlreadyYielded;
 8006048:	68bb      	ldr	r3, [r7, #8]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000e48 	.word	0x20000e48
 8006058:	20000e20 	.word	0x20000e20
 800605c:	20000de0 	.word	0x20000de0
 8006060:	20000e28 	.word	0x20000e28
 8006064:	20000950 	.word	0x20000950
 8006068:	2000094c 	.word	0x2000094c
 800606c:	20000e34 	.word	0x20000e34
 8006070:	20000e30 	.word	0x20000e30
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <xTaskGetTickCount+0x1c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006084:	687b      	ldr	r3, [r7, #4]
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000e24 	.word	0x20000e24

08006098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a2:	4b50      	ldr	r3, [pc, #320]	; (80061e4 <xTaskIncrementTick+0x14c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 808b 	bne.w	80061c2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060ac:	4b4e      	ldr	r3, [pc, #312]	; (80061e8 <xTaskIncrementTick+0x150>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060b4:	4a4c      	ldr	r2, [pc, #304]	; (80061e8 <xTaskIncrementTick+0x150>)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d122      	bne.n	8006106 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80060c0:	4b4a      	ldr	r3, [pc, #296]	; (80061ec <xTaskIncrementTick+0x154>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	b672      	cpsid	i
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	b662      	cpsie	i
 80060de:	603b      	str	r3, [r7, #0]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <xTaskIncrementTick+0x4a>
 80060e4:	4b41      	ldr	r3, [pc, #260]	; (80061ec <xTaskIncrementTick+0x154>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	4b41      	ldr	r3, [pc, #260]	; (80061f0 <xTaskIncrementTick+0x158>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	; (80061ec <xTaskIncrementTick+0x154>)
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	4a3f      	ldr	r2, [pc, #252]	; (80061f0 <xTaskIncrementTick+0x158>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	4b3e      	ldr	r3, [pc, #248]	; (80061f4 <xTaskIncrementTick+0x15c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	4a3d      	ldr	r2, [pc, #244]	; (80061f4 <xTaskIncrementTick+0x15c>)
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	f000 fae9 	bl	80066d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006106:	4b3c      	ldr	r3, [pc, #240]	; (80061f8 <xTaskIncrementTick+0x160>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	429a      	cmp	r2, r3
 800610e:	d349      	bcc.n	80061a4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006110:	4b36      	ldr	r3, [pc, #216]	; (80061ec <xTaskIncrementTick+0x154>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611a:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <xTaskIncrementTick+0x160>)
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	601a      	str	r2, [r3, #0]
					break;
 8006122:	e03f      	b.n	80061a4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006124:	4b31      	ldr	r3, [pc, #196]	; (80061ec <xTaskIncrementTick+0x154>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	d203      	bcs.n	8006144 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800613c:	4a2e      	ldr	r2, [pc, #184]	; (80061f8 <xTaskIncrementTick+0x160>)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006142:	e02f      	b.n	80061a4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3304      	adds	r3, #4
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe ff49 	bl	8004fe0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	2b00      	cmp	r3, #0
 8006154:	d004      	beq.n	8006160 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	3318      	adds	r3, #24
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe ff40 	bl	8004fe0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	4b25      	ldr	r3, [pc, #148]	; (80061fc <xTaskIncrementTick+0x164>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d903      	bls.n	8006174 <xTaskIncrementTick+0xdc>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	4a22      	ldr	r2, [pc, #136]	; (80061fc <xTaskIncrementTick+0x164>)
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <xTaskIncrementTick+0x168>)
 8006182:	441a      	add	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	3304      	adds	r3, #4
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f7fe fecb 	bl	8004f26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <xTaskIncrementTick+0x16c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	429a      	cmp	r2, r3
 800619c:	d3b8      	bcc.n	8006110 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800619e:	2301      	movs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a2:	e7b5      	b.n	8006110 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <xTaskIncrementTick+0x16c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	4915      	ldr	r1, [pc, #84]	; (8006200 <xTaskIncrementTick+0x168>)
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d907      	bls.n	80061cc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e004      	b.n	80061cc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <xTaskIncrementTick+0x170>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3301      	adds	r3, #1
 80061c8:	4a0f      	ldr	r2, [pc, #60]	; (8006208 <xTaskIncrementTick+0x170>)
 80061ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <xTaskIncrementTick+0x174>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061d8:	697b      	ldr	r3, [r7, #20]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000e48 	.word	0x20000e48
 80061e8:	20000e24 	.word	0x20000e24
 80061ec:	20000dd8 	.word	0x20000dd8
 80061f0:	20000ddc 	.word	0x20000ddc
 80061f4:	20000e38 	.word	0x20000e38
 80061f8:	20000e40 	.word	0x20000e40
 80061fc:	20000e28 	.word	0x20000e28
 8006200:	20000950 	.word	0x20000950
 8006204:	2000094c 	.word	0x2000094c
 8006208:	20000e30 	.word	0x20000e30
 800620c:	20000e34 	.word	0x20000e34

08006210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006216:	4b2b      	ldr	r3, [pc, #172]	; (80062c4 <vTaskSwitchContext+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800621e:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <vTaskSwitchContext+0xb8>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006224:	e048      	b.n	80062b8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8006226:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <vTaskSwitchContext+0xb8>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <vTaskSwitchContext+0xbc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e012      	b.n	800625a <vTaskSwitchContext+0x4a>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10c      	bne.n	8006254 <vTaskSwitchContext+0x44>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	b672      	cpsid	i
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	b662      	cpsie	i
 800624e:	607b      	str	r3, [r7, #4]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <vTaskSwitchContext+0x42>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3b01      	subs	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	491d      	ldr	r1, [pc, #116]	; (80062d0 <vTaskSwitchContext+0xc0>)
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0e2      	beq.n	8006234 <vTaskSwitchContext+0x24>
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <vTaskSwitchContext+0xc0>)
 800627a:	4413      	add	r3, r2
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	3308      	adds	r3, #8
 8006290:	429a      	cmp	r2, r3
 8006292:	d104      	bne.n	800629e <vTaskSwitchContext+0x8e>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a0b      	ldr	r2, [pc, #44]	; (80062d4 <vTaskSwitchContext+0xc4>)
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <vTaskSwitchContext+0xbc>)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <vTaskSwitchContext+0xc4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3354      	adds	r3, #84	; 0x54
 80062b4:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <vTaskSwitchContext+0xc8>)
 80062b6:	6013      	str	r3, [r2, #0]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	20000e48 	.word	0x20000e48
 80062c8:	20000e34 	.word	0x20000e34
 80062cc:	20000e28 	.word	0x20000e28
 80062d0:	20000950 	.word	0x20000950
 80062d4:	2000094c 	.word	0x2000094c
 80062d8:	20000010 	.word	0x20000010

080062dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10c      	bne.n	8006306 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	b672      	cpsid	i
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	b662      	cpsie	i
 8006300:	60fb      	str	r3, [r7, #12]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006306:	4b07      	ldr	r3, [pc, #28]	; (8006324 <vTaskPlaceOnEventList+0x48>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3318      	adds	r3, #24
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fe fe2d 	bl	8004f6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006314:	2101      	movs	r1, #1
 8006316:	6838      	ldr	r0, [r7, #0]
 8006318:	f000 fa8e 	bl	8006838 <prvAddCurrentTaskToDelayedList>
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	2000094c 	.word	0x2000094c

08006328 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10c      	bne.n	8006354 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	b672      	cpsid	i
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	b662      	cpsie	i
 800634e:	617b      	str	r3, [r7, #20]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006354:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <vTaskPlaceOnEventListRestricted+0x58>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3318      	adds	r3, #24
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7fe fde2 	bl	8004f26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68b8      	ldr	r0, [r7, #8]
 8006372:	f000 fa61 	bl	8006838 <prvAddCurrentTaskToDelayedList>
	}
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	2000094c 	.word	0x2000094c

08006384 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10c      	bne.n	80063b4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	b672      	cpsid	i
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	b662      	cpsie	i
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	3318      	adds	r3, #24
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe fe11 	bl	8004fe0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063be:	4b1e      	ldr	r3, [pc, #120]	; (8006438 <xTaskRemoveFromEventList+0xb4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d11d      	bne.n	8006402 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fe08 	bl	8004fe0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d4:	4b19      	ldr	r3, [pc, #100]	; (800643c <xTaskRemoveFromEventList+0xb8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d903      	bls.n	80063e4 <xTaskRemoveFromEventList+0x60>
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	4a16      	ldr	r2, [pc, #88]	; (800643c <xTaskRemoveFromEventList+0xb8>)
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4a13      	ldr	r2, [pc, #76]	; (8006440 <xTaskRemoveFromEventList+0xbc>)
 80063f2:	441a      	add	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe fd93 	bl	8004f26 <vListInsertEnd>
 8006400:	e005      	b.n	800640e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	3318      	adds	r3, #24
 8006406:	4619      	mov	r1, r3
 8006408:	480e      	ldr	r0, [pc, #56]	; (8006444 <xTaskRemoveFromEventList+0xc0>)
 800640a:	f7fe fd8c 	bl	8004f26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <xTaskRemoveFromEventList+0xc4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	429a      	cmp	r2, r3
 800641a:	d905      	bls.n	8006428 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <xTaskRemoveFromEventList+0xc8>)
 8006422:	2201      	movs	r2, #1
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	e001      	b.n	800642c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800642c:	697b      	ldr	r3, [r7, #20]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000e48 	.word	0x20000e48
 800643c:	20000e28 	.word	0x20000e28
 8006440:	20000950 	.word	0x20000950
 8006444:	20000de0 	.word	0x20000de0
 8006448:	2000094c 	.word	0x2000094c
 800644c:	20000e34 	.word	0x20000e34

08006450 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <vTaskInternalSetTimeOutState+0x24>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <vTaskInternalSetTimeOutState+0x28>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	605a      	str	r2, [r3, #4]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000e38 	.word	0x20000e38
 8006478:	20000e24 	.word	0x20000e24

0800647c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10c      	bne.n	80064a6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	b672      	cpsid	i
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	b662      	cpsie	i
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	b672      	cpsid	i
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	b662      	cpsie	i
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80064c6:	f000 fe71 	bl	80071ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064ca:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <xTaskCheckForTimeOut+0xc4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d102      	bne.n	80064ea <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e023      	b.n	8006532 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b15      	ldr	r3, [pc, #84]	; (8006544 <xTaskCheckForTimeOut+0xc8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d007      	beq.n	8006506 <xTaskCheckForTimeOut+0x8a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d302      	bcc.n	8006506 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	e015      	b.n	8006532 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	429a      	cmp	r2, r3
 800650e:	d20b      	bcs.n	8006528 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	1ad2      	subs	r2, r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff ff97 	bl	8006450 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
 8006526:	e004      	b.n	8006532 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006532:	f000 fe6f 	bl	8007214 <vPortExitCritical>

	return xReturn;
 8006536:	69fb      	ldr	r3, [r7, #28]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000e24 	.word	0x20000e24
 8006544:	20000e38 	.word	0x20000e38

08006548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800654c:	4b03      	ldr	r3, [pc, #12]	; (800655c <vTaskMissedYield+0x14>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
}
 8006552:	bf00      	nop
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	20000e34 	.word	0x20000e34

08006560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006568:	f000 f852 	bl	8006610 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
*			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <prvIdleTask+0x28>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d9f9      	bls.n	8006568 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <prvIdleTask+0x2c>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006584:	e7f0      	b.n	8006568 <prvIdleTask+0x8>
 8006586:	bf00      	nop
 8006588:	20000950 	.word	0x20000950
 800658c:	e000ed04 	.word	0xe000ed04

08006590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
 800659a:	e00c      	b.n	80065b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4a12      	ldr	r2, [pc, #72]	; (80065f0 <prvInitialiseTaskLists+0x60>)
 80065a8:	4413      	add	r3, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe fc8e 	bl	8004ecc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3301      	adds	r3, #1
 80065b4:	607b      	str	r3, [r7, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b37      	cmp	r3, #55	; 0x37
 80065ba:	d9ef      	bls.n	800659c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065bc:	480d      	ldr	r0, [pc, #52]	; (80065f4 <prvInitialiseTaskLists+0x64>)
 80065be:	f7fe fc85 	bl	8004ecc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065c2:	480d      	ldr	r0, [pc, #52]	; (80065f8 <prvInitialiseTaskLists+0x68>)
 80065c4:	f7fe fc82 	bl	8004ecc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065c8:	480c      	ldr	r0, [pc, #48]	; (80065fc <prvInitialiseTaskLists+0x6c>)
 80065ca:	f7fe fc7f 	bl	8004ecc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065ce:	480c      	ldr	r0, [pc, #48]	; (8006600 <prvInitialiseTaskLists+0x70>)
 80065d0:	f7fe fc7c 	bl	8004ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065d4:	480b      	ldr	r0, [pc, #44]	; (8006604 <prvInitialiseTaskLists+0x74>)
 80065d6:	f7fe fc79 	bl	8004ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065da:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <prvInitialiseTaskLists+0x78>)
 80065dc:	4a05      	ldr	r2, [pc, #20]	; (80065f4 <prvInitialiseTaskLists+0x64>)
 80065de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <prvInitialiseTaskLists+0x7c>)
 80065e2:	4a05      	ldr	r2, [pc, #20]	; (80065f8 <prvInitialiseTaskLists+0x68>)
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	bf00      	nop
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000950 	.word	0x20000950
 80065f4:	20000db0 	.word	0x20000db0
 80065f8:	20000dc4 	.word	0x20000dc4
 80065fc:	20000de0 	.word	0x20000de0
 8006600:	20000df4 	.word	0x20000df4
 8006604:	20000e0c 	.word	0x20000e0c
 8006608:	20000dd8 	.word	0x20000dd8
 800660c:	20000ddc 	.word	0x20000ddc

08006610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006616:	e019      	b.n	800664c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006618:	f000 fdc8 	bl	80071ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661c:	4b10      	ldr	r3, [pc, #64]	; (8006660 <prvCheckTasksWaitingTermination+0x50>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe fcd9 	bl	8004fe0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800662e:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <prvCheckTasksWaitingTermination+0x54>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3b01      	subs	r3, #1
 8006634:	4a0b      	ldr	r2, [pc, #44]	; (8006664 <prvCheckTasksWaitingTermination+0x54>)
 8006636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <prvCheckTasksWaitingTermination+0x58>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <prvCheckTasksWaitingTermination+0x58>)
 8006640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006642:	f000 fde7 	bl	8007214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f810 	bl	800666c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <prvCheckTasksWaitingTermination+0x58>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e1      	bne.n	8006618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000df4 	.word	0x20000df4
 8006664:	20000e20 	.word	0x20000e20
 8006668:	20000e08 	.word	0x20000e08

0800666c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3354      	adds	r3, #84	; 0x54
 8006678:	4618      	mov	r0, r3
 800667a:	f001 f8f7 	bl	800786c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006684:	2b00      	cmp	r3, #0
 8006686:	d108      	bne.n	800669a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	4618      	mov	r0, r3
 800668e:	f000 ff83 	bl	8007598 <vPortFree>
				vPortFree( pxTCB );
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 ff80 	bl	8007598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006698:	e01a      	b.n	80066d0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d103      	bne.n	80066ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 ff77 	bl	8007598 <vPortFree>
	}
 80066aa:	e011      	b.n	80066d0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d00c      	beq.n	80066d0 <prvDeleteTCB+0x64>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	b672      	cpsid	i
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	b662      	cpsie	i
 80066ca:	60fb      	str	r3, [r7, #12]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <prvDeleteTCB+0x62>
	}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <prvResetNextTaskUnblockTime+0x38>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <prvResetNextTaskUnblockTime+0x3c>)
 80066ea:	f04f 32ff 	mov.w	r2, #4294967295
 80066ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066f0:	e008      	b.n	8006704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <prvResetNextTaskUnblockTime+0x38>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a04      	ldr	r2, [pc, #16]	; (8006714 <prvResetNextTaskUnblockTime+0x3c>)
 8006702:	6013      	str	r3, [r2, #0]
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000dd8 	.word	0x20000dd8
 8006714:	20000e40 	.word	0x20000e40

08006718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800671e:	4b0b      	ldr	r3, [pc, #44]	; (800674c <xTaskGetSchedulerState+0x34>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006726:	2301      	movs	r3, #1
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	e008      	b.n	800673e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <xTaskGetSchedulerState+0x38>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006734:	2302      	movs	r3, #2
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	e001      	b.n	800673e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800673e:	687b      	ldr	r3, [r7, #4]
	}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	20000e2c 	.word	0x20000e2c
 8006750:	20000e48 	.word	0x20000e48

08006754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d05a      	beq.n	8006820 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800676a:	4b30      	ldr	r3, [pc, #192]	; (800682c <xTaskPriorityDisinherit+0xd8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	429a      	cmp	r2, r3
 8006772:	d00c      	beq.n	800678e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	b672      	cpsid	i
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	b662      	cpsie	i
 8006788:	60fb      	str	r3, [r7, #12]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10c      	bne.n	80067b0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	b672      	cpsid	i
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	b662      	cpsie	i
 80067aa:	60bb      	str	r3, [r7, #8]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b4:	1e5a      	subs	r2, r3, #1
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d02c      	beq.n	8006820 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d128      	bne.n	8006820 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fc04 	bl	8004fe0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <xTaskPriorityDisinherit+0xdc>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d903      	bls.n	8006800 <xTaskPriorityDisinherit+0xac>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <xTaskPriorityDisinherit+0xdc>)
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4a09      	ldr	r2, [pc, #36]	; (8006834 <xTaskPriorityDisinherit+0xe0>)
 800680e:	441a      	add	r2, r3
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7fe fb85 	bl	8004f26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006820:	697b      	ldr	r3, [r7, #20]
	}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2000094c 	.word	0x2000094c
 8006830:	20000e28 	.word	0x20000e28
 8006834:	20000950 	.word	0x20000950

08006838 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006842:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006848:	4b20      	ldr	r3, [pc, #128]	; (80068cc <prvAddCurrentTaskToDelayedList+0x94>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3304      	adds	r3, #4
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fbc6 	bl	8004fe0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d10a      	bne.n	8006872 <prvAddCurrentTaskToDelayedList+0x3a>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006862:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4819      	ldr	r0, [pc, #100]	; (80068d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800686c:	f7fe fb5b 	bl	8004f26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006870:	e026      	b.n	80068c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4413      	add	r3, r2
 8006878:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800687a:	4b14      	ldr	r3, [pc, #80]	; (80068cc <prvAddCurrentTaskToDelayedList+0x94>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	429a      	cmp	r2, r3
 8006888:	d209      	bcs.n	800689e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800688a:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <prvAddCurrentTaskToDelayedList+0x94>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fe fb69 	bl	8004f6e <vListInsert>
}
 800689c:	e010      	b.n	80068c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800689e:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <prvAddCurrentTaskToDelayedList+0x94>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe fb5f 	bl	8004f6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d202      	bcs.n	80068c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068ba:	4a08      	ldr	r2, [pc, #32]	; (80068dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6013      	str	r3, [r2, #0]
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000e24 	.word	0x20000e24
 80068cc:	2000094c 	.word	0x2000094c
 80068d0:	20000e0c 	.word	0x20000e0c
 80068d4:	20000ddc 	.word	0x20000ddc
 80068d8:	20000dd8 	.word	0x20000dd8
 80068dc:	20000e40 	.word	0x20000e40

080068e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068ea:	f000 fb15 	bl	8006f18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <xTimerCreateTimerTask+0x84>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d021      	beq.n	800693a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068fe:	1d3a      	adds	r2, r7, #4
 8006900:	f107 0108 	add.w	r1, r7, #8
 8006904:	f107 030c 	add.w	r3, r7, #12
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fac5 	bl	8004e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	2302      	movs	r3, #2
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	2300      	movs	r3, #0
 800691e:	460a      	mov	r2, r1
 8006920:	4911      	ldr	r1, [pc, #68]	; (8006968 <xTimerCreateTimerTask+0x88>)
 8006922:	4812      	ldr	r0, [pc, #72]	; (800696c <xTimerCreateTimerTask+0x8c>)
 8006924:	f7ff f890 	bl	8005a48 <xTaskCreateStatic>
 8006928:	4603      	mov	r3, r0
 800692a:	4a11      	ldr	r2, [pc, #68]	; (8006970 <xTimerCreateTimerTask+0x90>)
 800692c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <xTimerCreateTimerTask+0x90>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006936:	2301      	movs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10c      	bne.n	800695a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	b672      	cpsid	i
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	b662      	cpsie	i
 8006954:	613b      	str	r3, [r7, #16]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800695a:	697b      	ldr	r3, [r7, #20]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000e7c 	.word	0x20000e7c
 8006968:	0800884c 	.word	0x0800884c
 800696c:	08006ab1 	.word	0x08006ab1
 8006970:	20000e80 	.word	0x20000e80

08006974 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006982:	2300      	movs	r3, #0
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10c      	bne.n	80069a6 <xTimerGenericCommand+0x32>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	b672      	cpsid	i
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	b662      	cpsie	i
 80069a0:	623b      	str	r3, [r7, #32]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069a6:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <xTimerGenericCommand+0x9c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d02a      	beq.n	8006a04 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b05      	cmp	r3, #5
 80069be:	dc18      	bgt.n	80069f2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069c0:	f7ff feaa 	bl	8006718 <xTaskGetSchedulerState>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d109      	bne.n	80069de <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <xTimerGenericCommand+0x9c>)
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	f107 0110 	add.w	r1, r7, #16
 80069d2:	2300      	movs	r3, #0
 80069d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d6:	f7fe fc3d 	bl	8005254 <xQueueGenericSend>
 80069da:	6278      	str	r0, [r7, #36]	; 0x24
 80069dc:	e012      	b.n	8006a04 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069de:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <xTimerGenericCommand+0x9c>)
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f107 0110 	add.w	r1, r7, #16
 80069e6:	2300      	movs	r3, #0
 80069e8:	2200      	movs	r2, #0
 80069ea:	f7fe fc33 	bl	8005254 <xQueueGenericSend>
 80069ee:	6278      	str	r0, [r7, #36]	; 0x24
 80069f0:	e008      	b.n	8006a04 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <xTimerGenericCommand+0x9c>)
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f107 0110 	add.w	r1, r7, #16
 80069fa:	2300      	movs	r3, #0
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	f7fe fd2f 	bl	8005460 <xQueueGenericSendFromISR>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3728      	adds	r7, #40	; 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000e7c 	.word	0x20000e7c

08006a14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a1e:	4b23      	ldr	r3, [pc, #140]	; (8006aac <prvProcessExpiredTimer+0x98>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fad7 	bl	8004fe0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d024      	beq.n	8006a8a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	18d1      	adds	r1, r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	6978      	ldr	r0, [r7, #20]
 8006a4e:	f000 f8d3 	bl	8006bf8 <prvInsertTimerInActiveList>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d021      	beq.n	8006a9c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	2100      	movs	r1, #0
 8006a62:	6978      	ldr	r0, [r7, #20]
 8006a64:	f7ff ff86 	bl	8006974 <xTimerGenericCommand>
 8006a68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d115      	bne.n	8006a9c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	b672      	cpsid	i
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	b662      	cpsie	i
 8006a84:	60fb      	str	r3, [r7, #12]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	6978      	ldr	r0, [r7, #20]
 8006aa2:	4798      	blx	r3
}
 8006aa4:	bf00      	nop
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000e74 	.word	0x20000e74

08006ab0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ab8:	f107 0308 	add.w	r3, r7, #8
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 f857 	bl	8006b70 <prvGetNextExpireTime>
 8006ac2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f803 	bl	8006ad4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ace:	f000 f8d5 	bl	8006c7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ad2:	e7f1      	b.n	8006ab8 <prvTimerTask+0x8>

08006ad4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ade:	f7ff fa1d 	bl	8005f1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f866 	bl	8006bb8 <prvSampleTimeNow>
 8006aec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d130      	bne.n	8006b56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <prvProcessTimerOrBlockTask+0x3c>
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d806      	bhi.n	8006b10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b02:	f7ff fa19 	bl	8005f38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff83 	bl	8006a14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b0e:	e024      	b.n	8006b5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <prvProcessTimerOrBlockTask+0x90>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <prvProcessTimerOrBlockTask+0x50>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <prvProcessTimerOrBlockTask+0x52>
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b28:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <prvProcessTimerOrBlockTask+0x94>)
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7fe ff53 	bl	80059e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b3a:	f7ff f9fd 	bl	8005f38 <xTaskResumeAll>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b44:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <prvProcessTimerOrBlockTask+0x98>)
 8006b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	f3bf 8f6f 	isb	sy
}
 8006b54:	e001      	b.n	8006b5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b56:	f7ff f9ef 	bl	8005f38 <xTaskResumeAll>
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000e78 	.word	0x20000e78
 8006b68:	20000e7c 	.word	0x20000e7c
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b78:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <prvGetNextExpireTime+0x44>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <prvGetNextExpireTime+0x16>
 8006b82:	2201      	movs	r2, #1
 8006b84:	e000      	b.n	8006b88 <prvGetNextExpireTime+0x18>
 8006b86:	2200      	movs	r2, #0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <prvGetNextExpireTime+0x44>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	e001      	b.n	8006ba4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000e74 	.word	0x20000e74

08006bb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bc0:	f7ff fa5a 	bl	8006078 <xTaskGetTickCount>
 8006bc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <prvSampleTimeNow+0x3c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d205      	bcs.n	8006bdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bd0:	f000 f93c 	bl	8006e4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e002      	b.n	8006be2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006be2:	4a04      	ldr	r2, [pc, #16]	; (8006bf4 <prvSampleTimeNow+0x3c>)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006be8:	68fb      	ldr	r3, [r7, #12]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000e84 	.word	0x20000e84

08006bf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d812      	bhi.n	8006c44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d302      	bcc.n	8006c32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e01b      	b.n	8006c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c32:	4b10      	ldr	r3, [pc, #64]	; (8006c74 <prvInsertTimerInActiveList+0x7c>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	f7fe f996 	bl	8004f6e <vListInsert>
 8006c42:	e012      	b.n	8006c6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d206      	bcs.n	8006c5a <prvInsertTimerInActiveList+0x62>
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d302      	bcc.n	8006c5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c54:	2301      	movs	r3, #1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e007      	b.n	8006c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c5a:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <prvInsertTimerInActiveList+0x80>)
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3304      	adds	r3, #4
 8006c62:	4619      	mov	r1, r3
 8006c64:	4610      	mov	r0, r2
 8006c66:	f7fe f982 	bl	8004f6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c6a:	697b      	ldr	r3, [r7, #20]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000e78 	.word	0x20000e78
 8006c78:	20000e74 	.word	0x20000e74

08006c7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c82:	e0d0      	b.n	8006e26 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da1a      	bge.n	8006cc0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c8a:	1d3b      	adds	r3, r7, #4
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10c      	bne.n	8006cb0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	b672      	cpsid	i
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	b662      	cpsie	i
 8006caa:	61fb      	str	r3, [r7, #28]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb6:	6850      	ldr	r0, [r2, #4]
 8006cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cba:	6892      	ldr	r2, [r2, #8]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f2c0 80ae 	blt.w	8006e24 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe f981 	bl	8004fe0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cde:	463b      	mov	r3, r7
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff ff69 	bl	8006bb8 <prvSampleTimeNow>
 8006ce6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b09      	cmp	r3, #9
 8006cec:	f200 809b 	bhi.w	8006e26 <prvProcessReceivedCommands+0x1aa>
 8006cf0:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <prvProcessReceivedCommands+0x7c>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d21 	.word	0x08006d21
 8006d04:	08006d99 	.word	0x08006d99
 8006d08:	08006dad 	.word	0x08006dad
 8006d0c:	08006dfb 	.word	0x08006dfb
 8006d10:	08006d21 	.word	0x08006d21
 8006d14:	08006d21 	.word	0x08006d21
 8006d18:	08006d99 	.word	0x08006d99
 8006d1c:	08006dad 	.word	0x08006dad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	18d1      	adds	r1, r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d40:	f7ff ff5a 	bl	8006bf8 <prvInsertTimerInActiveList>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d06d      	beq.n	8006e26 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d062      	beq.n	8006e26 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	441a      	add	r2, r3
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d72:	f7ff fdff 	bl	8006974 <xTimerGenericCommand>
 8006d76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d153      	bne.n	8006e26 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	b672      	cpsid	i
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	b662      	cpsie	i
 8006d92:	61bb      	str	r3, [r7, #24]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006daa:	e03c      	b.n	8006e26 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10c      	bne.n	8006de6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	b672      	cpsid	i
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	b662      	cpsie	i
 8006de0:	617b      	str	r3, [r7, #20]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	18d1      	adds	r1, r2, r3
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df4:	f7ff ff00 	bl	8006bf8 <prvInsertTimerInActiveList>
					break;
 8006df8:	e015      	b.n	8006e26 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d103      	bne.n	8006e10 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e0a:	f000 fbc5 	bl	8007598 <vPortFree>
 8006e0e:	e00a      	b.n	8006e26 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e22:	e000      	b.n	8006e26 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e26:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <prvProcessReceivedCommands+0x1cc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	1d39      	adds	r1, r7, #4
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fbb6 	bl	80055a0 <xQueueReceive>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f47f af24 	bne.w	8006c84 <prvProcessReceivedCommands+0x8>
	}
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	3730      	adds	r7, #48	; 0x30
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000e7c 	.word	0x20000e7c

08006e4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e52:	e04a      	b.n	8006eea <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e54:	4b2e      	ldr	r3, [pc, #184]	; (8006f10 <prvSwitchTimerLists+0xc4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <prvSwitchTimerLists+0xc4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe f8b7 	bl	8004fe0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d030      	beq.n	8006eea <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4413      	add	r3, r2
 8006e90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d90e      	bls.n	8006eb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <prvSwitchTimerLists+0xc4>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7fe f85c 	bl	8004f6e <vListInsert>
 8006eb6:	e018      	b.n	8006eea <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff fd56 	bl	8006974 <xTimerGenericCommand>
 8006ec8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10c      	bne.n	8006eea <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	b672      	cpsid	i
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	b662      	cpsie	i
 8006ee4:	603b      	str	r3, [r7, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <prvSwitchTimerLists+0xc4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1af      	bne.n	8006e54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <prvSwitchTimerLists+0xc4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <prvSwitchTimerLists+0xc8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <prvSwitchTimerLists+0xc4>)
 8006f00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f02:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <prvSwitchTimerLists+0xc8>)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000e74 	.word	0x20000e74
 8006f14:	20000e78 	.word	0x20000e78

08006f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f1e:	f000 f945 	bl	80071ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d120      	bne.n	8006f6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f2a:	4814      	ldr	r0, [pc, #80]	; (8006f7c <prvCheckForValidListAndQueue+0x64>)
 8006f2c:	f7fd ffce 	bl	8004ecc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f30:	4813      	ldr	r0, [pc, #76]	; (8006f80 <prvCheckForValidListAndQueue+0x68>)
 8006f32:	f7fd ffcb 	bl	8004ecc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <prvCheckForValidListAndQueue+0x6c>)
 8006f38:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <prvCheckForValidListAndQueue+0x64>)
 8006f3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <prvCheckForValidListAndQueue+0x70>)
 8006f3e:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <prvCheckForValidListAndQueue+0x68>)
 8006f40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f42:	2300      	movs	r3, #0
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <prvCheckForValidListAndQueue+0x74>)
 8006f48:	4a11      	ldr	r2, [pc, #68]	; (8006f90 <prvCheckForValidListAndQueue+0x78>)
 8006f4a:	2110      	movs	r1, #16
 8006f4c:	200a      	movs	r0, #10
 8006f4e:	f7fe f8db 	bl	8005108 <xQueueGenericCreateStatic>
 8006f52:	4603      	mov	r3, r0
 8006f54:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	490b      	ldr	r1, [pc, #44]	; (8006f94 <prvCheckForValidListAndQueue+0x7c>)
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fd10 	bl	800598c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f6c:	f000 f952 	bl	8007214 <vPortExitCritical>
}
 8006f70:	bf00      	nop
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000e7c 	.word	0x20000e7c
 8006f7c:	20000e4c 	.word	0x20000e4c
 8006f80:	20000e60 	.word	0x20000e60
 8006f84:	20000e74 	.word	0x20000e74
 8006f88:	20000e78 	.word	0x20000e78
 8006f8c:	20000f28 	.word	0x20000f28
 8006f90:	20000e88 	.word	0x20000e88
 8006f94:	08008854 	.word	0x08008854

08006f98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3b04      	subs	r3, #4
 8006fa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3b04      	subs	r3, #4
 8006fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f023 0201 	bic.w	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc8:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <pxPortInitialiseStack+0x64>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3b14      	subs	r3, #20
 8006fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f06f 0202 	mvn.w	r2, #2
 8006fe6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3b20      	subs	r3, #32
 8006fec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fee:	68fb      	ldr	r3, [r7, #12]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	08007001 	.word	0x08007001

08007000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <prvTaskExitError+0x5c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d00c      	beq.n	800702e <prvTaskExitError+0x2e>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	b672      	cpsid	i
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	b662      	cpsie	i
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <prvTaskExitError+0x2c>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	b672      	cpsid	i
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	b662      	cpsie	i
 8007042:	60bb      	str	r3, [r7, #8]
}
 8007044:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007046:	bf00      	nop
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0fc      	beq.n	8007048 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	2000000c 	.word	0x2000000c

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	4770      	bx	lr
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst2>:
 8007080:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <prvPortStartFirstTask+0x24>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8814 	msr	CONTROL, r0
 800709a:	b662      	cpsie	i
 800709c:	b661      	cpsie	f
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	df00      	svc	0
 80070a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070aa:	bf00      	nop
 80070ac:	e000ed08 	.word	0xe000ed08

080070b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070b6:	4b37      	ldr	r3, [pc, #220]	; (8007194 <xPortStartScheduler+0xe4>)
 80070b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	22ff      	movs	r2, #255	; 0xff
 80070c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <xPortStartScheduler+0xe8>)
 80070dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070de:	4b2f      	ldr	r3, [pc, #188]	; (800719c <xPortStartScheduler+0xec>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070e4:	e009      	b.n	80070fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80070e6:	4b2d      	ldr	r3, [pc, #180]	; (800719c <xPortStartScheduler+0xec>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	4a2b      	ldr	r2, [pc, #172]	; (800719c <xPortStartScheduler+0xec>)
 80070ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d0ef      	beq.n	80070e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007106:	4b25      	ldr	r3, [pc, #148]	; (800719c <xPortStartScheduler+0xec>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1c3 0307 	rsb	r3, r3, #7
 800710e:	2b04      	cmp	r3, #4
 8007110:	d00c      	beq.n	800712c <xPortStartScheduler+0x7c>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	b672      	cpsid	i
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	b662      	cpsie	i
 8007126:	60bb      	str	r3, [r7, #8]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <xPortStartScheduler+0xec>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	4a1a      	ldr	r2, [pc, #104]	; (800719c <xPortStartScheduler+0xec>)
 8007134:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007136:	4b19      	ldr	r3, [pc, #100]	; (800719c <xPortStartScheduler+0xec>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <xPortStartScheduler+0xec>)
 8007140:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	b2da      	uxtb	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <xPortStartScheduler+0xf0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <xPortStartScheduler+0xf0>)
 8007150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007154:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007156:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <xPortStartScheduler+0xf0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a11      	ldr	r2, [pc, #68]	; (80071a0 <xPortStartScheduler+0xf0>)
 800715c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007160:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007162:	f000 f8dd 	bl	8007320 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <xPortStartScheduler+0xf4>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800716c:	f000 f8fc 	bl	8007368 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <xPortStartScheduler+0xf8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <xPortStartScheduler+0xf8>)
 8007176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800717a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800717c:	f7ff ff84 	bl	8007088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007180:	f7ff f846 	bl	8006210 <vTaskSwitchContext>
	prvTaskExitError();
 8007184:	f7ff ff3c 	bl	8007000 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	e000e400 	.word	0xe000e400
 8007198:	20000f78 	.word	0x20000f78
 800719c:	20000f7c 	.word	0x20000f7c
 80071a0:	e000ed20 	.word	0xe000ed20
 80071a4:	2000000c 	.word	0x2000000c
 80071a8:	e000ef34 	.word	0xe000ef34

080071ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	607b      	str	r3, [r7, #4]
}
 80071c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <vPortEnterCritical+0x60>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	4a0e      	ldr	r2, [pc, #56]	; (800720c <vPortEnterCritical+0x60>)
 80071d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <vPortEnterCritical+0x60>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d111      	bne.n	8007200 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071dc:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <vPortEnterCritical+0x64>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00c      	beq.n	8007200 <vPortEnterCritical+0x54>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	b672      	cpsid	i
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	b662      	cpsie	i
 80071fa:	603b      	str	r3, [r7, #0]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <vPortEnterCritical+0x52>
	}
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	2000000c 	.word	0x2000000c
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800721a:	4b13      	ldr	r3, [pc, #76]	; (8007268 <vPortExitCritical+0x54>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10c      	bne.n	800723c <vPortExitCritical+0x28>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	b672      	cpsid	i
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	b662      	cpsie	i
 8007236:	607b      	str	r3, [r7, #4]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800723c:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <vPortExitCritical+0x54>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3b01      	subs	r3, #1
 8007242:	4a09      	ldr	r2, [pc, #36]	; (8007268 <vPortExitCritical+0x54>)
 8007244:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007246:	4b08      	ldr	r3, [pc, #32]	; (8007268 <vPortExitCritical+0x54>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d105      	bne.n	800725a <vPortExitCritical+0x46>
 800724e:	2300      	movs	r3, #0
 8007250:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f383 8811 	msr	BASEPRI, r3
}
 8007258:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	2000000c 	.word	0x2000000c
 800726c:	00000000 	.word	0x00000000

08007270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007270:	f3ef 8009 	mrs	r0, PSP
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <pxCurrentTCBConst>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f01e 0f10 	tst.w	lr, #16
 8007280:	bf08      	it	eq
 8007282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	6010      	str	r0, [r2, #0]
 800728c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007294:	b672      	cpsid	i
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	b662      	cpsie	i
 80072a4:	f7fe ffb4 	bl	8006210 <vTaskSwitchContext>
 80072a8:	f04f 0000 	mov.w	r0, #0
 80072ac:	f380 8811 	msr	BASEPRI, r0
 80072b0:	bc09      	pop	{r0, r3}
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	6808      	ldr	r0, [r1, #0]
 80072b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ba:	f01e 0f10 	tst.w	lr, #16
 80072be:	bf08      	it	eq
 80072c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072c4:	f380 8809 	msr	PSP, r0
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <pxCurrentTCBConst>:
 80072d0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop

080072d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	b672      	cpsid	i
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	b662      	cpsie	i
 80072f2:	607b      	str	r3, [r7, #4]
}
 80072f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072f6:	f7fe fecf 	bl	8006098 <xTaskIncrementTick>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <SysTick_Handler+0x44>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f383 8811 	msr	BASEPRI, r3
}
 8007312:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <vPortSetupTimerInterrupt+0x34>)
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <vPortSetupTimerInterrupt+0x38>)
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007330:	4b0a      	ldr	r3, [pc, #40]	; (800735c <vPortSetupTimerInterrupt+0x3c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a0a      	ldr	r2, [pc, #40]	; (8007360 <vPortSetupTimerInterrupt+0x40>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	099b      	lsrs	r3, r3, #6
 800733c:	4a09      	ldr	r2, [pc, #36]	; (8007364 <vPortSetupTimerInterrupt+0x44>)
 800733e:	3b01      	subs	r3, #1
 8007340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <vPortSetupTimerInterrupt+0x34>)
 8007344:	2207      	movs	r2, #7
 8007346:	601a      	str	r2, [r3, #0]
}
 8007348:	bf00      	nop
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	e000e010 	.word	0xe000e010
 8007358:	e000e018 	.word	0xe000e018
 800735c:	20000000 	.word	0x20000000
 8007360:	10624dd3 	.word	0x10624dd3
 8007364:	e000e014 	.word	0xe000e014

08007368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007368:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007378 <vPortEnableVFP+0x10>
 800736c:	6801      	ldr	r1, [r0, #0]
 800736e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007372:	6001      	str	r1, [r0, #0]
 8007374:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007376:	bf00      	nop
 8007378:	e000ed88 	.word	0xe000ed88

0800737c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007382:	f3ef 8305 	mrs	r3, IPSR
 8007386:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b0f      	cmp	r3, #15
 800738c:	d916      	bls.n	80073bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800738e:	4a19      	ldr	r2, [pc, #100]	; (80073f4 <vPortValidateInterruptPriority+0x78>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007398:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <vPortValidateInterruptPriority+0x7c>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	7afa      	ldrb	r2, [r7, #11]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d20c      	bcs.n	80073bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	b672      	cpsid	i
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	b662      	cpsie	i
 80073b6:	607b      	str	r3, [r7, #4]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <vPortValidateInterruptPriority+0x80>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073c4:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <vPortValidateInterruptPriority+0x84>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d90c      	bls.n	80073e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	603b      	str	r3, [r7, #0]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <vPortValidateInterruptPriority+0x68>
	}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	e000e3f0 	.word	0xe000e3f0
 80073f8:	20000f78 	.word	0x20000f78
 80073fc:	e000ed0c 	.word	0xe000ed0c
 8007400:	20000f7c 	.word	0x20000f7c

08007404 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800740c:	2300      	movs	r3, #0
 800740e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007410:	f7fe fd84 	bl	8005f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007414:	4b5b      	ldr	r3, [pc, #364]	; (8007584 <pvPortMalloc+0x180>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800741c:	f000 f91a 	bl	8007654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007420:	4b59      	ldr	r3, [pc, #356]	; (8007588 <pvPortMalloc+0x184>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	f040 8092 	bne.w	8007552 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01f      	beq.n	8007474 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007434:	2208      	movs	r2, #8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	2b00      	cmp	r3, #0
 8007444:	d016      	beq.n	8007474 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f023 0307 	bic.w	r3, r3, #7
 800744c:	3308      	adds	r3, #8
 800744e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <pvPortMalloc+0x70>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	b672      	cpsid	i
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	b662      	cpsie	i
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d06b      	beq.n	8007552 <pvPortMalloc+0x14e>
 800747a:	4b44      	ldr	r3, [pc, #272]	; (800758c <pvPortMalloc+0x188>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d866      	bhi.n	8007552 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007484:	4b42      	ldr	r3, [pc, #264]	; (8007590 <pvPortMalloc+0x18c>)
 8007486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007488:	4b41      	ldr	r3, [pc, #260]	; (8007590 <pvPortMalloc+0x18c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800748e:	e004      	b.n	800749a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d903      	bls.n	80074ac <pvPortMalloc+0xa8>
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f1      	bne.n	8007490 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074ac:	4b35      	ldr	r3, [pc, #212]	; (8007584 <pvPortMalloc+0x180>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d04d      	beq.n	8007552 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2208      	movs	r2, #8
 80074bc:	4413      	add	r3, r2
 80074be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	2308      	movs	r3, #8
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d921      	bls.n	800751c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <pvPortMalloc+0x100>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	b672      	cpsid	i
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	b662      	cpsie	i
 80074fe:	613b      	str	r3, [r7, #16]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 f8fe 	bl	8007718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800751c:	4b1b      	ldr	r3, [pc, #108]	; (800758c <pvPortMalloc+0x188>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a19      	ldr	r2, [pc, #100]	; (800758c <pvPortMalloc+0x188>)
 8007528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752a:	4b18      	ldr	r3, [pc, #96]	; (800758c <pvPortMalloc+0x188>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <pvPortMalloc+0x190>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d203      	bcs.n	800753e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007536:	4b15      	ldr	r3, [pc, #84]	; (800758c <pvPortMalloc+0x188>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a16      	ldr	r2, [pc, #88]	; (8007594 <pvPortMalloc+0x190>)
 800753c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b11      	ldr	r3, [pc, #68]	; (8007588 <pvPortMalloc+0x184>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007552:	f7fe fcf1 	bl	8005f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00c      	beq.n	800757a <pvPortMalloc+0x176>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <pvPortMalloc+0x174>
	return pvReturn;
 800757a:	69fb      	ldr	r3, [r7, #28]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3728      	adds	r7, #40	; 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20004b88 	.word	0x20004b88
 8007588:	20004b94 	.word	0x20004b94
 800758c:	20004b8c 	.word	0x20004b8c
 8007590:	20004b80 	.word	0x20004b80
 8007594:	20004b90 	.word	0x20004b90

08007598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d04c      	beq.n	8007644 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075aa:	2308      	movs	r3, #8
 80075ac:	425b      	negs	r3, r3
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4413      	add	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	4b23      	ldr	r3, [pc, #140]	; (800764c <vPortFree+0xb4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10c      	bne.n	80075e0 <vPortFree+0x48>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	b672      	cpsid	i
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	b662      	cpsie	i
 80075da:	60fb      	str	r3, [r7, #12]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00c      	beq.n	8007602 <vPortFree+0x6a>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	b672      	cpsid	i
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	b662      	cpsie	i
 80075fc:	60bb      	str	r3, [r7, #8]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	4b11      	ldr	r3, [pc, #68]	; (800764c <vPortFree+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d019      	beq.n	8007644 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d115      	bne.n	8007644 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <vPortFree+0xb4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	43db      	mvns	r3, r3
 8007622:	401a      	ands	r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007628:	f7fe fc78 	bl	8005f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b07      	ldr	r3, [pc, #28]	; (8007650 <vPortFree+0xb8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4413      	add	r3, r2
 8007636:	4a06      	ldr	r2, [pc, #24]	; (8007650 <vPortFree+0xb8>)
 8007638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f000 f86c 	bl	8007718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007640:	f7fe fc7a 	bl	8005f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007644:	bf00      	nop
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20004b94 	.word	0x20004b94
 8007650:	20004b8c 	.word	0x20004b8c

08007654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800765a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800765e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007660:	4b27      	ldr	r3, [pc, #156]	; (8007700 <prvHeapInit+0xac>)
 8007662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3307      	adds	r3, #7
 8007672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <prvHeapInit+0xac>)
 8007684:	4413      	add	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800768c:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <prvHeapInit+0xb0>)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007692:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <prvHeapInit+0xb0>)
 8007694:	2200      	movs	r2, #0
 8007696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076a0:	2208      	movs	r2, #8
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <prvHeapInit+0xb4>)
 80076b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <prvHeapInit+0xb4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2200      	movs	r2, #0
 80076bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <prvHeapInit+0xb4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076d4:	4b0c      	ldr	r3, [pc, #48]	; (8007708 <prvHeapInit+0xb4>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4a0a      	ldr	r2, [pc, #40]	; (800770c <prvHeapInit+0xb8>)
 80076e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4a09      	ldr	r2, [pc, #36]	; (8007710 <prvHeapInit+0xbc>)
 80076ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <prvHeapInit+0xc0>)
 80076ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000f80 	.word	0x20000f80
 8007704:	20004b80 	.word	0x20004b80
 8007708:	20004b88 	.word	0x20004b88
 800770c:	20004b90 	.word	0x20004b90
 8007710:	20004b8c 	.word	0x20004b8c
 8007714:	20004b94 	.word	0x20004b94

08007718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <prvInsertBlockIntoFreeList+0xac>)
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e002      	b.n	800772c <prvInsertBlockIntoFreeList+0x14>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d8f7      	bhi.n	8007726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	4413      	add	r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d108      	bne.n	800775a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d118      	bne.n	80077a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d00d      	beq.n	8007796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	e008      	b.n	80077a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e003      	b.n	80077a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d002      	beq.n	80077b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20004b80 	.word	0x20004b80
 80077c8:	20004b88 	.word	0x20004b88

080077cc <__errno>:
 80077cc:	4b01      	ldr	r3, [pc, #4]	; (80077d4 <__errno+0x8>)
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20000010 	.word	0x20000010

080077d8 <__libc_init_array>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	4d0d      	ldr	r5, [pc, #52]	; (8007810 <__libc_init_array+0x38>)
 80077dc:	4c0d      	ldr	r4, [pc, #52]	; (8007814 <__libc_init_array+0x3c>)
 80077de:	1b64      	subs	r4, r4, r5
 80077e0:	10a4      	asrs	r4, r4, #2
 80077e2:	2600      	movs	r6, #0
 80077e4:	42a6      	cmp	r6, r4
 80077e6:	d109      	bne.n	80077fc <__libc_init_array+0x24>
 80077e8:	4d0b      	ldr	r5, [pc, #44]	; (8007818 <__libc_init_array+0x40>)
 80077ea:	4c0c      	ldr	r4, [pc, #48]	; (800781c <__libc_init_array+0x44>)
 80077ec:	f001 f80e 	bl	800880c <_init>
 80077f0:	1b64      	subs	r4, r4, r5
 80077f2:	10a4      	asrs	r4, r4, #2
 80077f4:	2600      	movs	r6, #0
 80077f6:	42a6      	cmp	r6, r4
 80077f8:	d105      	bne.n	8007806 <__libc_init_array+0x2e>
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007800:	4798      	blx	r3
 8007802:	3601      	adds	r6, #1
 8007804:	e7ee      	b.n	80077e4 <__libc_init_array+0xc>
 8007806:	f855 3b04 	ldr.w	r3, [r5], #4
 800780a:	4798      	blx	r3
 800780c:	3601      	adds	r6, #1
 800780e:	e7f2      	b.n	80077f6 <__libc_init_array+0x1e>
 8007810:	08008978 	.word	0x08008978
 8007814:	08008978 	.word	0x08008978
 8007818:	08008978 	.word	0x08008978
 800781c:	0800897c 	.word	0x0800897c

08007820 <__retarget_lock_acquire_recursive>:
 8007820:	4770      	bx	lr

08007822 <__retarget_lock_release_recursive>:
 8007822:	4770      	bx	lr

08007824 <memcpy>:
 8007824:	440a      	add	r2, r1
 8007826:	4291      	cmp	r1, r2
 8007828:	f100 33ff 	add.w	r3, r0, #4294967295
 800782c:	d100      	bne.n	8007830 <memcpy+0xc>
 800782e:	4770      	bx	lr
 8007830:	b510      	push	{r4, lr}
 8007832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783a:	4291      	cmp	r1, r2
 800783c:	d1f9      	bne.n	8007832 <memcpy+0xe>
 800783e:	bd10      	pop	{r4, pc}

08007840 <memset>:
 8007840:	4402      	add	r2, r0
 8007842:	4603      	mov	r3, r0
 8007844:	4293      	cmp	r3, r2
 8007846:	d100      	bne.n	800784a <memset+0xa>
 8007848:	4770      	bx	lr
 800784a:	f803 1b01 	strb.w	r1, [r3], #1
 800784e:	e7f9      	b.n	8007844 <memset+0x4>

08007850 <cleanup_glue>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	460c      	mov	r4, r1
 8007854:	6809      	ldr	r1, [r1, #0]
 8007856:	4605      	mov	r5, r0
 8007858:	b109      	cbz	r1, 800785e <cleanup_glue+0xe>
 800785a:	f7ff fff9 	bl	8007850 <cleanup_glue>
 800785e:	4621      	mov	r1, r4
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007866:	f000 b869 	b.w	800793c <_free_r>
	...

0800786c <_reclaim_reent>:
 800786c:	4b2c      	ldr	r3, [pc, #176]	; (8007920 <_reclaim_reent+0xb4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4283      	cmp	r3, r0
 8007872:	b570      	push	{r4, r5, r6, lr}
 8007874:	4604      	mov	r4, r0
 8007876:	d051      	beq.n	800791c <_reclaim_reent+0xb0>
 8007878:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800787a:	b143      	cbz	r3, 800788e <_reclaim_reent+0x22>
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d14a      	bne.n	8007918 <_reclaim_reent+0xac>
 8007882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007884:	6819      	ldr	r1, [r3, #0]
 8007886:	b111      	cbz	r1, 800788e <_reclaim_reent+0x22>
 8007888:	4620      	mov	r0, r4
 800788a:	f000 f857 	bl	800793c <_free_r>
 800788e:	6961      	ldr	r1, [r4, #20]
 8007890:	b111      	cbz	r1, 8007898 <_reclaim_reent+0x2c>
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f852 	bl	800793c <_free_r>
 8007898:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800789a:	b111      	cbz	r1, 80078a2 <_reclaim_reent+0x36>
 800789c:	4620      	mov	r0, r4
 800789e:	f000 f84d 	bl	800793c <_free_r>
 80078a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80078a4:	b111      	cbz	r1, 80078ac <_reclaim_reent+0x40>
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f848 	bl	800793c <_free_r>
 80078ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80078ae:	b111      	cbz	r1, 80078b6 <_reclaim_reent+0x4a>
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 f843 	bl	800793c <_free_r>
 80078b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078b8:	b111      	cbz	r1, 80078c0 <_reclaim_reent+0x54>
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 f83e 	bl	800793c <_free_r>
 80078c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80078c2:	b111      	cbz	r1, 80078ca <_reclaim_reent+0x5e>
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 f839 	bl	800793c <_free_r>
 80078ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80078cc:	b111      	cbz	r1, 80078d4 <_reclaim_reent+0x68>
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 f834 	bl	800793c <_free_r>
 80078d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078d6:	b111      	cbz	r1, 80078de <_reclaim_reent+0x72>
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 f82f 	bl	800793c <_free_r>
 80078de:	69a3      	ldr	r3, [r4, #24]
 80078e0:	b1e3      	cbz	r3, 800791c <_reclaim_reent+0xb0>
 80078e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80078e4:	4620      	mov	r0, r4
 80078e6:	4798      	blx	r3
 80078e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80078ea:	b1b9      	cbz	r1, 800791c <_reclaim_reent+0xb0>
 80078ec:	4620      	mov	r0, r4
 80078ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078f2:	f7ff bfad 	b.w	8007850 <cleanup_glue>
 80078f6:	5949      	ldr	r1, [r1, r5]
 80078f8:	b941      	cbnz	r1, 800790c <_reclaim_reent+0xa0>
 80078fa:	3504      	adds	r5, #4
 80078fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078fe:	2d80      	cmp	r5, #128	; 0x80
 8007900:	68d9      	ldr	r1, [r3, #12]
 8007902:	d1f8      	bne.n	80078f6 <_reclaim_reent+0x8a>
 8007904:	4620      	mov	r0, r4
 8007906:	f000 f819 	bl	800793c <_free_r>
 800790a:	e7ba      	b.n	8007882 <_reclaim_reent+0x16>
 800790c:	680e      	ldr	r6, [r1, #0]
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f814 	bl	800793c <_free_r>
 8007914:	4631      	mov	r1, r6
 8007916:	e7ef      	b.n	80078f8 <_reclaim_reent+0x8c>
 8007918:	2500      	movs	r5, #0
 800791a:	e7ef      	b.n	80078fc <_reclaim_reent+0x90>
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	bf00      	nop
 8007920:	20000010 	.word	0x20000010

08007924 <__malloc_lock>:
 8007924:	4801      	ldr	r0, [pc, #4]	; (800792c <__malloc_lock+0x8>)
 8007926:	f7ff bf7b 	b.w	8007820 <__retarget_lock_acquire_recursive>
 800792a:	bf00      	nop
 800792c:	20004b98 	.word	0x20004b98

08007930 <__malloc_unlock>:
 8007930:	4801      	ldr	r0, [pc, #4]	; (8007938 <__malloc_unlock+0x8>)
 8007932:	f7ff bf76 	b.w	8007822 <__retarget_lock_release_recursive>
 8007936:	bf00      	nop
 8007938:	20004b98 	.word	0x20004b98

0800793c <_free_r>:
 800793c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800793e:	2900      	cmp	r1, #0
 8007940:	d044      	beq.n	80079cc <_free_r+0x90>
 8007942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007946:	9001      	str	r0, [sp, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	f1a1 0404 	sub.w	r4, r1, #4
 800794e:	bfb8      	it	lt
 8007950:	18e4      	addlt	r4, r4, r3
 8007952:	f7ff ffe7 	bl	8007924 <__malloc_lock>
 8007956:	4a1e      	ldr	r2, [pc, #120]	; (80079d0 <_free_r+0x94>)
 8007958:	9801      	ldr	r0, [sp, #4]
 800795a:	6813      	ldr	r3, [r2, #0]
 800795c:	b933      	cbnz	r3, 800796c <_free_r+0x30>
 800795e:	6063      	str	r3, [r4, #4]
 8007960:	6014      	str	r4, [r2, #0]
 8007962:	b003      	add	sp, #12
 8007964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007968:	f7ff bfe2 	b.w	8007930 <__malloc_unlock>
 800796c:	42a3      	cmp	r3, r4
 800796e:	d908      	bls.n	8007982 <_free_r+0x46>
 8007970:	6825      	ldr	r5, [r4, #0]
 8007972:	1961      	adds	r1, r4, r5
 8007974:	428b      	cmp	r3, r1
 8007976:	bf01      	itttt	eq
 8007978:	6819      	ldreq	r1, [r3, #0]
 800797a:	685b      	ldreq	r3, [r3, #4]
 800797c:	1949      	addeq	r1, r1, r5
 800797e:	6021      	streq	r1, [r4, #0]
 8007980:	e7ed      	b.n	800795e <_free_r+0x22>
 8007982:	461a      	mov	r2, r3
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	b10b      	cbz	r3, 800798c <_free_r+0x50>
 8007988:	42a3      	cmp	r3, r4
 800798a:	d9fa      	bls.n	8007982 <_free_r+0x46>
 800798c:	6811      	ldr	r1, [r2, #0]
 800798e:	1855      	adds	r5, r2, r1
 8007990:	42a5      	cmp	r5, r4
 8007992:	d10b      	bne.n	80079ac <_free_r+0x70>
 8007994:	6824      	ldr	r4, [r4, #0]
 8007996:	4421      	add	r1, r4
 8007998:	1854      	adds	r4, r2, r1
 800799a:	42a3      	cmp	r3, r4
 800799c:	6011      	str	r1, [r2, #0]
 800799e:	d1e0      	bne.n	8007962 <_free_r+0x26>
 80079a0:	681c      	ldr	r4, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	6053      	str	r3, [r2, #4]
 80079a6:	4421      	add	r1, r4
 80079a8:	6011      	str	r1, [r2, #0]
 80079aa:	e7da      	b.n	8007962 <_free_r+0x26>
 80079ac:	d902      	bls.n	80079b4 <_free_r+0x78>
 80079ae:	230c      	movs	r3, #12
 80079b0:	6003      	str	r3, [r0, #0]
 80079b2:	e7d6      	b.n	8007962 <_free_r+0x26>
 80079b4:	6825      	ldr	r5, [r4, #0]
 80079b6:	1961      	adds	r1, r4, r5
 80079b8:	428b      	cmp	r3, r1
 80079ba:	bf04      	itt	eq
 80079bc:	6819      	ldreq	r1, [r3, #0]
 80079be:	685b      	ldreq	r3, [r3, #4]
 80079c0:	6063      	str	r3, [r4, #4]
 80079c2:	bf04      	itt	eq
 80079c4:	1949      	addeq	r1, r1, r5
 80079c6:	6021      	streq	r1, [r4, #0]
 80079c8:	6054      	str	r4, [r2, #4]
 80079ca:	e7ca      	b.n	8007962 <_free_r+0x26>
 80079cc:	b003      	add	sp, #12
 80079ce:	bd30      	pop	{r4, r5, pc}
 80079d0:	20004b9c 	.word	0x20004b9c

080079d4 <pow>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	ed2d 8b02 	vpush	{d8}
 80079da:	eeb0 8a40 	vmov.f32	s16, s0
 80079de:	eef0 8a60 	vmov.f32	s17, s1
 80079e2:	ec55 4b11 	vmov	r4, r5, d1
 80079e6:	f000 f867 	bl	8007ab8 <__ieee754_pow>
 80079ea:	4622      	mov	r2, r4
 80079ec:	462b      	mov	r3, r5
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	ec57 6b10 	vmov	r6, r7, d0
 80079f6:	f7f9 f861 	bl	8000abc <__aeabi_dcmpun>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d13b      	bne.n	8007a76 <pow+0xa2>
 80079fe:	ec51 0b18 	vmov	r0, r1, d8
 8007a02:	2200      	movs	r2, #0
 8007a04:	2300      	movs	r3, #0
 8007a06:	f7f9 f827 	bl	8000a58 <__aeabi_dcmpeq>
 8007a0a:	b1b8      	cbz	r0, 8007a3c <pow+0x68>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4620      	mov	r0, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7f9 f820 	bl	8000a58 <__aeabi_dcmpeq>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d146      	bne.n	8007aaa <pow+0xd6>
 8007a1c:	ec45 4b10 	vmov	d0, r4, r5
 8007a20:	f000 fe63 	bl	80086ea <finite>
 8007a24:	b338      	cbz	r0, 8007a76 <pow+0xa2>
 8007a26:	2200      	movs	r2, #0
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7f9 f81d 	bl	8000a6c <__aeabi_dcmplt>
 8007a32:	b300      	cbz	r0, 8007a76 <pow+0xa2>
 8007a34:	f7ff feca 	bl	80077cc <__errno>
 8007a38:	2322      	movs	r3, #34	; 0x22
 8007a3a:	e01b      	b.n	8007a74 <pow+0xa0>
 8007a3c:	ec47 6b10 	vmov	d0, r6, r7
 8007a40:	f000 fe53 	bl	80086ea <finite>
 8007a44:	b9e0      	cbnz	r0, 8007a80 <pow+0xac>
 8007a46:	eeb0 0a48 	vmov.f32	s0, s16
 8007a4a:	eef0 0a68 	vmov.f32	s1, s17
 8007a4e:	f000 fe4c 	bl	80086ea <finite>
 8007a52:	b1a8      	cbz	r0, 8007a80 <pow+0xac>
 8007a54:	ec45 4b10 	vmov	d0, r4, r5
 8007a58:	f000 fe47 	bl	80086ea <finite>
 8007a5c:	b180      	cbz	r0, 8007a80 <pow+0xac>
 8007a5e:	4632      	mov	r2, r6
 8007a60:	463b      	mov	r3, r7
 8007a62:	4630      	mov	r0, r6
 8007a64:	4639      	mov	r1, r7
 8007a66:	f7f9 f829 	bl	8000abc <__aeabi_dcmpun>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d0e2      	beq.n	8007a34 <pow+0x60>
 8007a6e:	f7ff fead 	bl	80077cc <__errno>
 8007a72:	2321      	movs	r3, #33	; 0x21
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	ecbd 8b02 	vpop	{d8}
 8007a7a:	ec47 6b10 	vmov	d0, r6, r7
 8007a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a80:	2200      	movs	r2, #0
 8007a82:	2300      	movs	r3, #0
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	f7f8 ffe6 	bl	8000a58 <__aeabi_dcmpeq>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d0f2      	beq.n	8007a76 <pow+0xa2>
 8007a90:	eeb0 0a48 	vmov.f32	s0, s16
 8007a94:	eef0 0a68 	vmov.f32	s1, s17
 8007a98:	f000 fe27 	bl	80086ea <finite>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d0ea      	beq.n	8007a76 <pow+0xa2>
 8007aa0:	ec45 4b10 	vmov	d0, r4, r5
 8007aa4:	f000 fe21 	bl	80086ea <finite>
 8007aa8:	e7c3      	b.n	8007a32 <pow+0x5e>
 8007aaa:	4f01      	ldr	r7, [pc, #4]	; (8007ab0 <pow+0xdc>)
 8007aac:	2600      	movs	r6, #0
 8007aae:	e7e2      	b.n	8007a76 <pow+0xa2>
 8007ab0:	3ff00000 	.word	0x3ff00000
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <__ieee754_pow>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	ed2d 8b06 	vpush	{d8-d10}
 8007ac0:	b089      	sub	sp, #36	; 0x24
 8007ac2:	ed8d 1b00 	vstr	d1, [sp]
 8007ac6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007aca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007ace:	ea58 0102 	orrs.w	r1, r8, r2
 8007ad2:	ec57 6b10 	vmov	r6, r7, d0
 8007ad6:	d115      	bne.n	8007b04 <__ieee754_pow+0x4c>
 8007ad8:	19b3      	adds	r3, r6, r6
 8007ada:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007ade:	4152      	adcs	r2, r2
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	4b89      	ldr	r3, [pc, #548]	; (8007d08 <__ieee754_pow+0x250>)
 8007ae4:	4193      	sbcs	r3, r2
 8007ae6:	f080 84d2 	bcs.w	800848e <__ieee754_pow+0x9d6>
 8007aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f8 fb93 	bl	800021c <__adddf3>
 8007af6:	ec41 0b10 	vmov	d0, r0, r1
 8007afa:	b009      	add	sp, #36	; 0x24
 8007afc:	ecbd 8b06 	vpop	{d8-d10}
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	4b81      	ldr	r3, [pc, #516]	; (8007d0c <__ieee754_pow+0x254>)
 8007b06:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007b0a:	429c      	cmp	r4, r3
 8007b0c:	ee10 aa10 	vmov	sl, s0
 8007b10:	463d      	mov	r5, r7
 8007b12:	dc06      	bgt.n	8007b22 <__ieee754_pow+0x6a>
 8007b14:	d101      	bne.n	8007b1a <__ieee754_pow+0x62>
 8007b16:	2e00      	cmp	r6, #0
 8007b18:	d1e7      	bne.n	8007aea <__ieee754_pow+0x32>
 8007b1a:	4598      	cmp	r8, r3
 8007b1c:	dc01      	bgt.n	8007b22 <__ieee754_pow+0x6a>
 8007b1e:	d10f      	bne.n	8007b40 <__ieee754_pow+0x88>
 8007b20:	b172      	cbz	r2, 8007b40 <__ieee754_pow+0x88>
 8007b22:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007b26:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007b2a:	ea55 050a 	orrs.w	r5, r5, sl
 8007b2e:	d1dc      	bne.n	8007aea <__ieee754_pow+0x32>
 8007b30:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b34:	18db      	adds	r3, r3, r3
 8007b36:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007b3a:	4152      	adcs	r2, r2
 8007b3c:	429d      	cmp	r5, r3
 8007b3e:	e7d0      	b.n	8007ae2 <__ieee754_pow+0x2a>
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	da3b      	bge.n	8007bbc <__ieee754_pow+0x104>
 8007b44:	4b72      	ldr	r3, [pc, #456]	; (8007d10 <__ieee754_pow+0x258>)
 8007b46:	4598      	cmp	r8, r3
 8007b48:	dc51      	bgt.n	8007bee <__ieee754_pow+0x136>
 8007b4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007b4e:	4598      	cmp	r8, r3
 8007b50:	f340 84ac 	ble.w	80084ac <__ieee754_pow+0x9f4>
 8007b54:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b5c:	2b14      	cmp	r3, #20
 8007b5e:	dd0f      	ble.n	8007b80 <__ieee754_pow+0xc8>
 8007b60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007b64:	fa22 f103 	lsr.w	r1, r2, r3
 8007b68:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	f040 849d 	bne.w	80084ac <__ieee754_pow+0x9f4>
 8007b72:	f001 0101 	and.w	r1, r1, #1
 8007b76:	f1c1 0302 	rsb	r3, r1, #2
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	b182      	cbz	r2, 8007ba0 <__ieee754_pow+0xe8>
 8007b7e:	e05f      	b.n	8007c40 <__ieee754_pow+0x188>
 8007b80:	2a00      	cmp	r2, #0
 8007b82:	d15b      	bne.n	8007c3c <__ieee754_pow+0x184>
 8007b84:	f1c3 0314 	rsb	r3, r3, #20
 8007b88:	fa48 f103 	asr.w	r1, r8, r3
 8007b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b90:	4543      	cmp	r3, r8
 8007b92:	f040 8488 	bne.w	80084a6 <__ieee754_pow+0x9ee>
 8007b96:	f001 0101 	and.w	r1, r1, #1
 8007b9a:	f1c1 0302 	rsb	r3, r1, #2
 8007b9e:	9304      	str	r3, [sp, #16]
 8007ba0:	4b5c      	ldr	r3, [pc, #368]	; (8007d14 <__ieee754_pow+0x25c>)
 8007ba2:	4598      	cmp	r8, r3
 8007ba4:	d132      	bne.n	8007c0c <__ieee754_pow+0x154>
 8007ba6:	f1b9 0f00 	cmp.w	r9, #0
 8007baa:	f280 8478 	bge.w	800849e <__ieee754_pow+0x9e6>
 8007bae:	4959      	ldr	r1, [pc, #356]	; (8007d14 <__ieee754_pow+0x25c>)
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7f8 fe11 	bl	80007dc <__aeabi_ddiv>
 8007bba:	e79c      	b.n	8007af6 <__ieee754_pow+0x3e>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	d13d      	bne.n	8007c40 <__ieee754_pow+0x188>
 8007bc4:	4b51      	ldr	r3, [pc, #324]	; (8007d0c <__ieee754_pow+0x254>)
 8007bc6:	4598      	cmp	r8, r3
 8007bc8:	d1ea      	bne.n	8007ba0 <__ieee754_pow+0xe8>
 8007bca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007bce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007bd2:	ea53 030a 	orrs.w	r3, r3, sl
 8007bd6:	f000 845a 	beq.w	800848e <__ieee754_pow+0x9d6>
 8007bda:	4b4f      	ldr	r3, [pc, #316]	; (8007d18 <__ieee754_pow+0x260>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	dd08      	ble.n	8007bf2 <__ieee754_pow+0x13a>
 8007be0:	f1b9 0f00 	cmp.w	r9, #0
 8007be4:	f2c0 8457 	blt.w	8008496 <__ieee754_pow+0x9de>
 8007be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bec:	e783      	b.n	8007af6 <__ieee754_pow+0x3e>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e7e5      	b.n	8007bbe <__ieee754_pow+0x106>
 8007bf2:	f1b9 0f00 	cmp.w	r9, #0
 8007bf6:	f04f 0000 	mov.w	r0, #0
 8007bfa:	f04f 0100 	mov.w	r1, #0
 8007bfe:	f6bf af7a 	bge.w	8007af6 <__ieee754_pow+0x3e>
 8007c02:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007c06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c0a:	e774      	b.n	8007af6 <__ieee754_pow+0x3e>
 8007c0c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007c10:	d106      	bne.n	8007c20 <__ieee754_pow+0x168>
 8007c12:	4632      	mov	r2, r6
 8007c14:	463b      	mov	r3, r7
 8007c16:	4630      	mov	r0, r6
 8007c18:	4639      	mov	r1, r7
 8007c1a:	f7f8 fcb5 	bl	8000588 <__aeabi_dmul>
 8007c1e:	e76a      	b.n	8007af6 <__ieee754_pow+0x3e>
 8007c20:	4b3e      	ldr	r3, [pc, #248]	; (8007d1c <__ieee754_pow+0x264>)
 8007c22:	4599      	cmp	r9, r3
 8007c24:	d10c      	bne.n	8007c40 <__ieee754_pow+0x188>
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	db0a      	blt.n	8007c40 <__ieee754_pow+0x188>
 8007c2a:	ec47 6b10 	vmov	d0, r6, r7
 8007c2e:	b009      	add	sp, #36	; 0x24
 8007c30:	ecbd 8b06 	vpop	{d8-d10}
 8007c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	f000 bc6c 	b.w	8008514 <__ieee754_sqrt>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9304      	str	r3, [sp, #16]
 8007c40:	ec47 6b10 	vmov	d0, r6, r7
 8007c44:	f000 fd48 	bl	80086d8 <fabs>
 8007c48:	ec51 0b10 	vmov	r0, r1, d0
 8007c4c:	f1ba 0f00 	cmp.w	sl, #0
 8007c50:	d129      	bne.n	8007ca6 <__ieee754_pow+0x1ee>
 8007c52:	b124      	cbz	r4, 8007c5e <__ieee754_pow+0x1a6>
 8007c54:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <__ieee754_pow+0x25c>)
 8007c56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d123      	bne.n	8007ca6 <__ieee754_pow+0x1ee>
 8007c5e:	f1b9 0f00 	cmp.w	r9, #0
 8007c62:	da05      	bge.n	8007c70 <__ieee754_pow+0x1b8>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	2000      	movs	r0, #0
 8007c6a:	492a      	ldr	r1, [pc, #168]	; (8007d14 <__ieee754_pow+0x25c>)
 8007c6c:	f7f8 fdb6 	bl	80007dc <__aeabi_ddiv>
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	f6bf af40 	bge.w	8007af6 <__ieee754_pow+0x3e>
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007c7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c80:	4323      	orrs	r3, r4
 8007c82:	d108      	bne.n	8007c96 <__ieee754_pow+0x1de>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	f7f8 fac4 	bl	8000218 <__aeabi_dsub>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	e78f      	b.n	8007bb6 <__ieee754_pow+0xfe>
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	f47f af2c 	bne.w	8007af6 <__ieee754_pow+0x3e>
 8007c9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	e727      	b.n	8007af6 <__ieee754_pow+0x3e>
 8007ca6:	0feb      	lsrs	r3, r5, #31
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	9306      	str	r3, [sp, #24]
 8007cac:	9a06      	ldr	r2, [sp, #24]
 8007cae:	9b04      	ldr	r3, [sp, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d102      	bne.n	8007cba <__ieee754_pow+0x202>
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	e7e6      	b.n	8007c88 <__ieee754_pow+0x1d0>
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <__ieee754_pow+0x268>)
 8007cbc:	4598      	cmp	r8, r3
 8007cbe:	f340 80fb 	ble.w	8007eb8 <__ieee754_pow+0x400>
 8007cc2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007cc6:	4598      	cmp	r8, r3
 8007cc8:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <__ieee754_pow+0x260>)
 8007cca:	dd0c      	ble.n	8007ce6 <__ieee754_pow+0x22e>
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	dc0f      	bgt.n	8007cf0 <__ieee754_pow+0x238>
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	da0f      	bge.n	8007cf6 <__ieee754_pow+0x23e>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	b009      	add	sp, #36	; 0x24
 8007cda:	ecbd 8b06 	vpop	{d8-d10}
 8007cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce2:	f000 bcf0 	b.w	80086c6 <__math_oflow>
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	dbf2      	blt.n	8007cd0 <__ieee754_pow+0x218>
 8007cea:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <__ieee754_pow+0x25c>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	dd19      	ble.n	8007d24 <__ieee754_pow+0x26c>
 8007cf0:	f1b9 0f00 	cmp.w	r9, #0
 8007cf4:	dcef      	bgt.n	8007cd6 <__ieee754_pow+0x21e>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	b009      	add	sp, #36	; 0x24
 8007cfa:	ecbd 8b06 	vpop	{d8-d10}
 8007cfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d02:	f000 bcd7 	b.w	80086b4 <__math_uflow>
 8007d06:	bf00      	nop
 8007d08:	fff00000 	.word	0xfff00000
 8007d0c:	7ff00000 	.word	0x7ff00000
 8007d10:	433fffff 	.word	0x433fffff
 8007d14:	3ff00000 	.word	0x3ff00000
 8007d18:	3fefffff 	.word	0x3fefffff
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	41e00000 	.word	0x41e00000
 8007d24:	4b60      	ldr	r3, [pc, #384]	; (8007ea8 <__ieee754_pow+0x3f0>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	f7f8 fa76 	bl	8000218 <__aeabi_dsub>
 8007d2c:	a354      	add	r3, pc, #336	; (adr r3, 8007e80 <__ieee754_pow+0x3c8>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	4604      	mov	r4, r0
 8007d34:	460d      	mov	r5, r1
 8007d36:	f7f8 fc27 	bl	8000588 <__aeabi_dmul>
 8007d3a:	a353      	add	r3, pc, #332	; (adr r3, 8007e88 <__ieee754_pow+0x3d0>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	4606      	mov	r6, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fc1e 	bl	8000588 <__aeabi_dmul>
 8007d4c:	4b57      	ldr	r3, [pc, #348]	; (8007eac <__ieee754_pow+0x3f4>)
 8007d4e:	4682      	mov	sl, r0
 8007d50:	468b      	mov	fp, r1
 8007d52:	2200      	movs	r2, #0
 8007d54:	4620      	mov	r0, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	f7f8 fc16 	bl	8000588 <__aeabi_dmul>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	a14b      	add	r1, pc, #300	; (adr r1, 8007e90 <__ieee754_pow+0x3d8>)
 8007d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d66:	f7f8 fa57 	bl	8000218 <__aeabi_dsub>
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	f7f8 fc0b 	bl	8000588 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	2000      	movs	r0, #0
 8007d78:	494d      	ldr	r1, [pc, #308]	; (8007eb0 <__ieee754_pow+0x3f8>)
 8007d7a:	f7f8 fa4d 	bl	8000218 <__aeabi_dsub>
 8007d7e:	4622      	mov	r2, r4
 8007d80:	4680      	mov	r8, r0
 8007d82:	4689      	mov	r9, r1
 8007d84:	462b      	mov	r3, r5
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 fbfd 	bl	8000588 <__aeabi_dmul>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4640      	mov	r0, r8
 8007d94:	4649      	mov	r1, r9
 8007d96:	f7f8 fbf7 	bl	8000588 <__aeabi_dmul>
 8007d9a:	a33f      	add	r3, pc, #252	; (adr r3, 8007e98 <__ieee754_pow+0x3e0>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fbf2 	bl	8000588 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4650      	mov	r0, sl
 8007daa:	4659      	mov	r1, fp
 8007dac:	f7f8 fa34 	bl	8000218 <__aeabi_dsub>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4680      	mov	r8, r0
 8007db6:	4689      	mov	r9, r1
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f8 fa2e 	bl	800021c <__adddf3>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	4632      	mov	r2, r6
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	460d      	mov	r5, r1
 8007dca:	f7f8 fa25 	bl	8000218 <__aeabi_dsub>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	f7f8 fa1f 	bl	8000218 <__aeabi_dsub>
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	9a06      	ldr	r2, [sp, #24]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	4313      	orrs	r3, r2
 8007de2:	4682      	mov	sl, r0
 8007de4:	468b      	mov	fp, r1
 8007de6:	f040 81e7 	bne.w	80081b8 <__ieee754_pow+0x700>
 8007dea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007ea0 <__ieee754_pow+0x3e8>
 8007dee:	eeb0 8a47 	vmov.f32	s16, s14
 8007df2:	eef0 8a67 	vmov.f32	s17, s15
 8007df6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	463b      	mov	r3, r7
 8007e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e04:	f7f8 fa08 	bl	8000218 <__aeabi_dsub>
 8007e08:	4622      	mov	r2, r4
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	f7f8 fbbc 	bl	8000588 <__aeabi_dmul>
 8007e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e14:	4680      	mov	r8, r0
 8007e16:	4689      	mov	r9, r1
 8007e18:	4650      	mov	r0, sl
 8007e1a:	4659      	mov	r1, fp
 8007e1c:	f7f8 fbb4 	bl	8000588 <__aeabi_dmul>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4640      	mov	r0, r8
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 f9f8 	bl	800021c <__adddf3>
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	4680      	mov	r8, r0
 8007e32:	4689      	mov	r9, r1
 8007e34:	4620      	mov	r0, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	f7f8 fba6 	bl	8000588 <__aeabi_dmul>
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4604      	mov	r4, r0
 8007e40:	460d      	mov	r5, r1
 8007e42:	4602      	mov	r2, r0
 8007e44:	4649      	mov	r1, r9
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7f8 f9e8 	bl	800021c <__adddf3>
 8007e4c:	4b19      	ldr	r3, [pc, #100]	; (8007eb4 <__ieee754_pow+0x3fc>)
 8007e4e:	4299      	cmp	r1, r3
 8007e50:	ec45 4b19 	vmov	d9, r4, r5
 8007e54:	4606      	mov	r6, r0
 8007e56:	460f      	mov	r7, r1
 8007e58:	468b      	mov	fp, r1
 8007e5a:	f340 82f1 	ble.w	8008440 <__ieee754_pow+0x988>
 8007e5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007e62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007e66:	4303      	orrs	r3, r0
 8007e68:	f000 81e4 	beq.w	8008234 <__ieee754_pow+0x77c>
 8007e6c:	ec51 0b18 	vmov	r0, r1, d8
 8007e70:	2200      	movs	r2, #0
 8007e72:	2300      	movs	r3, #0
 8007e74:	f7f8 fdfa 	bl	8000a6c <__aeabi_dcmplt>
 8007e78:	3800      	subs	r0, #0
 8007e7a:	bf18      	it	ne
 8007e7c:	2001      	movne	r0, #1
 8007e7e:	e72b      	b.n	8007cd8 <__ieee754_pow+0x220>
 8007e80:	60000000 	.word	0x60000000
 8007e84:	3ff71547 	.word	0x3ff71547
 8007e88:	f85ddf44 	.word	0xf85ddf44
 8007e8c:	3e54ae0b 	.word	0x3e54ae0b
 8007e90:	55555555 	.word	0x55555555
 8007e94:	3fd55555 	.word	0x3fd55555
 8007e98:	652b82fe 	.word	0x652b82fe
 8007e9c:	3ff71547 	.word	0x3ff71547
 8007ea0:	00000000 	.word	0x00000000
 8007ea4:	bff00000 	.word	0xbff00000
 8007ea8:	3ff00000 	.word	0x3ff00000
 8007eac:	3fd00000 	.word	0x3fd00000
 8007eb0:	3fe00000 	.word	0x3fe00000
 8007eb4:	408fffff 	.word	0x408fffff
 8007eb8:	4bd5      	ldr	r3, [pc, #852]	; (8008210 <__ieee754_pow+0x758>)
 8007eba:	402b      	ands	r3, r5
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	b92b      	cbnz	r3, 8007ecc <__ieee754_pow+0x414>
 8007ec0:	4bd4      	ldr	r3, [pc, #848]	; (8008214 <__ieee754_pow+0x75c>)
 8007ec2:	f7f8 fb61 	bl	8000588 <__aeabi_dmul>
 8007ec6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007eca:	460c      	mov	r4, r1
 8007ecc:	1523      	asrs	r3, r4, #20
 8007ece:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ed2:	4413      	add	r3, r2
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	4bd0      	ldr	r3, [pc, #832]	; (8008218 <__ieee754_pow+0x760>)
 8007ed8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007edc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ee6:	dd08      	ble.n	8007efa <__ieee754_pow+0x442>
 8007ee8:	4bcc      	ldr	r3, [pc, #816]	; (800821c <__ieee754_pow+0x764>)
 8007eea:	429c      	cmp	r4, r3
 8007eec:	f340 8162 	ble.w	80081b4 <__ieee754_pow+0x6fc>
 8007ef0:	9b05      	ldr	r3, [sp, #20]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007efa:	2400      	movs	r4, #0
 8007efc:	00e3      	lsls	r3, r4, #3
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	4bc7      	ldr	r3, [pc, #796]	; (8008220 <__ieee754_pow+0x768>)
 8007f02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f06:	ed93 7b00 	vldr	d7, [r3]
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	ec53 2b17 	vmov	r2, r3, d7
 8007f10:	eeb0 9a47 	vmov.f32	s18, s14
 8007f14:	eef0 9a67 	vmov.f32	s19, s15
 8007f18:	4682      	mov	sl, r0
 8007f1a:	f7f8 f97d 	bl	8000218 <__aeabi_dsub>
 8007f1e:	4652      	mov	r2, sl
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	462b      	mov	r3, r5
 8007f26:	ec51 0b19 	vmov	r0, r1, d9
 8007f2a:	f7f8 f977 	bl	800021c <__adddf3>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	2000      	movs	r0, #0
 8007f34:	49bb      	ldr	r1, [pc, #748]	; (8008224 <__ieee754_pow+0x76c>)
 8007f36:	f7f8 fc51 	bl	80007dc <__aeabi_ddiv>
 8007f3a:	ec41 0b1a 	vmov	d10, r0, r1
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4630      	mov	r0, r6
 8007f44:	4639      	mov	r1, r7
 8007f46:	f7f8 fb1f 	bl	8000588 <__aeabi_dmul>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f50:	9302      	str	r3, [sp, #8]
 8007f52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f56:	46ab      	mov	fp, r5
 8007f58:	106d      	asrs	r5, r5, #1
 8007f5a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007f5e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007f62:	ec41 0b18 	vmov	d8, r0, r1
 8007f66:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4614      	mov	r4, r2
 8007f72:	461d      	mov	r5, r3
 8007f74:	f7f8 fb08 	bl	8000588 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	4639      	mov	r1, r7
 8007f80:	f7f8 f94a 	bl	8000218 <__aeabi_dsub>
 8007f84:	ec53 2b19 	vmov	r2, r3, d9
 8007f88:	4606      	mov	r6, r0
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7f8 f942 	bl	8000218 <__aeabi_dsub>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	4650      	mov	r0, sl
 8007f9a:	4659      	mov	r1, fp
 8007f9c:	f7f8 f93c 	bl	8000218 <__aeabi_dsub>
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	f7f8 faf0 	bl	8000588 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f932 	bl	8000218 <__aeabi_dsub>
 8007fb4:	ec53 2b1a 	vmov	r2, r3, d10
 8007fb8:	f7f8 fae6 	bl	8000588 <__aeabi_dmul>
 8007fbc:	ec53 2b18 	vmov	r2, r3, d8
 8007fc0:	ec41 0b19 	vmov	d9, r0, r1
 8007fc4:	ec51 0b18 	vmov	r0, r1, d8
 8007fc8:	f7f8 fade 	bl	8000588 <__aeabi_dmul>
 8007fcc:	a37c      	add	r3, pc, #496	; (adr r3, 80081c0 <__ieee754_pow+0x708>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	f7f8 fad7 	bl	8000588 <__aeabi_dmul>
 8007fda:	a37b      	add	r3, pc, #492	; (adr r3, 80081c8 <__ieee754_pow+0x710>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f7f8 f91c 	bl	800021c <__adddf3>
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	f7f8 face 	bl	8000588 <__aeabi_dmul>
 8007fec:	a378      	add	r3, pc, #480	; (adr r3, 80081d0 <__ieee754_pow+0x718>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f7f8 f913 	bl	800021c <__adddf3>
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	462b      	mov	r3, r5
 8007ffa:	f7f8 fac5 	bl	8000588 <__aeabi_dmul>
 8007ffe:	a376      	add	r3, pc, #472	; (adr r3, 80081d8 <__ieee754_pow+0x720>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 f90a 	bl	800021c <__adddf3>
 8008008:	4622      	mov	r2, r4
 800800a:	462b      	mov	r3, r5
 800800c:	f7f8 fabc 	bl	8000588 <__aeabi_dmul>
 8008010:	a373      	add	r3, pc, #460	; (adr r3, 80081e0 <__ieee754_pow+0x728>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f7f8 f901 	bl	800021c <__adddf3>
 800801a:	4622      	mov	r2, r4
 800801c:	462b      	mov	r3, r5
 800801e:	f7f8 fab3 	bl	8000588 <__aeabi_dmul>
 8008022:	a371      	add	r3, pc, #452	; (adr r3, 80081e8 <__ieee754_pow+0x730>)
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	f7f8 f8f8 	bl	800021c <__adddf3>
 800802c:	4622      	mov	r2, r4
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	462b      	mov	r3, r5
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 faa6 	bl	8000588 <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4630      	mov	r0, r6
 8008042:	4639      	mov	r1, r7
 8008044:	f7f8 faa0 	bl	8000588 <__aeabi_dmul>
 8008048:	4642      	mov	r2, r8
 800804a:	4604      	mov	r4, r0
 800804c:	460d      	mov	r5, r1
 800804e:	464b      	mov	r3, r9
 8008050:	ec51 0b18 	vmov	r0, r1, d8
 8008054:	f7f8 f8e2 	bl	800021c <__adddf3>
 8008058:	ec53 2b19 	vmov	r2, r3, d9
 800805c:	f7f8 fa94 	bl	8000588 <__aeabi_dmul>
 8008060:	4622      	mov	r2, r4
 8008062:	462b      	mov	r3, r5
 8008064:	f7f8 f8da 	bl	800021c <__adddf3>
 8008068:	4642      	mov	r2, r8
 800806a:	4682      	mov	sl, r0
 800806c:	468b      	mov	fp, r1
 800806e:	464b      	mov	r3, r9
 8008070:	4640      	mov	r0, r8
 8008072:	4649      	mov	r1, r9
 8008074:	f7f8 fa88 	bl	8000588 <__aeabi_dmul>
 8008078:	4b6b      	ldr	r3, [pc, #428]	; (8008228 <__ieee754_pow+0x770>)
 800807a:	2200      	movs	r2, #0
 800807c:	4606      	mov	r6, r0
 800807e:	460f      	mov	r7, r1
 8008080:	f7f8 f8cc 	bl	800021c <__adddf3>
 8008084:	4652      	mov	r2, sl
 8008086:	465b      	mov	r3, fp
 8008088:	f7f8 f8c8 	bl	800021c <__adddf3>
 800808c:	2000      	movs	r0, #0
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4640      	mov	r0, r8
 8008098:	4649      	mov	r1, r9
 800809a:	f7f8 fa75 	bl	8000588 <__aeabi_dmul>
 800809e:	4b62      	ldr	r3, [pc, #392]	; (8008228 <__ieee754_pow+0x770>)
 80080a0:	4680      	mov	r8, r0
 80080a2:	4689      	mov	r9, r1
 80080a4:	2200      	movs	r2, #0
 80080a6:	4620      	mov	r0, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	f7f8 f8b5 	bl	8000218 <__aeabi_dsub>
 80080ae:	4632      	mov	r2, r6
 80080b0:	463b      	mov	r3, r7
 80080b2:	f7f8 f8b1 	bl	8000218 <__aeabi_dsub>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4650      	mov	r0, sl
 80080bc:	4659      	mov	r1, fp
 80080be:	f7f8 f8ab 	bl	8000218 <__aeabi_dsub>
 80080c2:	ec53 2b18 	vmov	r2, r3, d8
 80080c6:	f7f8 fa5f 	bl	8000588 <__aeabi_dmul>
 80080ca:	4622      	mov	r2, r4
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	462b      	mov	r3, r5
 80080d2:	ec51 0b19 	vmov	r0, r1, d9
 80080d6:	f7f8 fa57 	bl	8000588 <__aeabi_dmul>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4630      	mov	r0, r6
 80080e0:	4639      	mov	r1, r7
 80080e2:	f7f8 f89b 	bl	800021c <__adddf3>
 80080e6:	4606      	mov	r6, r0
 80080e8:	460f      	mov	r7, r1
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4640      	mov	r0, r8
 80080f0:	4649      	mov	r1, r9
 80080f2:	f7f8 f893 	bl	800021c <__adddf3>
 80080f6:	a33e      	add	r3, pc, #248	; (adr r3, 80081f0 <__ieee754_pow+0x738>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	2000      	movs	r0, #0
 80080fe:	4604      	mov	r4, r0
 8008100:	460d      	mov	r5, r1
 8008102:	f7f8 fa41 	bl	8000588 <__aeabi_dmul>
 8008106:	4642      	mov	r2, r8
 8008108:	ec41 0b18 	vmov	d8, r0, r1
 800810c:	464b      	mov	r3, r9
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 f881 	bl	8000218 <__aeabi_dsub>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 f87b 	bl	8000218 <__aeabi_dsub>
 8008122:	a335      	add	r3, pc, #212	; (adr r3, 80081f8 <__ieee754_pow+0x740>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 fa2e 	bl	8000588 <__aeabi_dmul>
 800812c:	a334      	add	r3, pc, #208	; (adr r3, 8008200 <__ieee754_pow+0x748>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	4620      	mov	r0, r4
 8008138:	4629      	mov	r1, r5
 800813a:	f7f8 fa25 	bl	8000588 <__aeabi_dmul>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4630      	mov	r0, r6
 8008144:	4639      	mov	r1, r7
 8008146:	f7f8 f869 	bl	800021c <__adddf3>
 800814a:	9a07      	ldr	r2, [sp, #28]
 800814c:	4b37      	ldr	r3, [pc, #220]	; (800822c <__ieee754_pow+0x774>)
 800814e:	4413      	add	r3, r2
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f862 	bl	800021c <__adddf3>
 8008158:	4682      	mov	sl, r0
 800815a:	9805      	ldr	r0, [sp, #20]
 800815c:	468b      	mov	fp, r1
 800815e:	f7f8 f9a9 	bl	80004b4 <__aeabi_i2d>
 8008162:	9a07      	ldr	r2, [sp, #28]
 8008164:	4b32      	ldr	r3, [pc, #200]	; (8008230 <__ieee754_pow+0x778>)
 8008166:	4413      	add	r3, r2
 8008168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800816c:	4606      	mov	r6, r0
 800816e:	460f      	mov	r7, r1
 8008170:	4652      	mov	r2, sl
 8008172:	465b      	mov	r3, fp
 8008174:	ec51 0b18 	vmov	r0, r1, d8
 8008178:	f7f8 f850 	bl	800021c <__adddf3>
 800817c:	4642      	mov	r2, r8
 800817e:	464b      	mov	r3, r9
 8008180:	f7f8 f84c 	bl	800021c <__adddf3>
 8008184:	4632      	mov	r2, r6
 8008186:	463b      	mov	r3, r7
 8008188:	f7f8 f848 	bl	800021c <__adddf3>
 800818c:	2000      	movs	r0, #0
 800818e:	4632      	mov	r2, r6
 8008190:	463b      	mov	r3, r7
 8008192:	4604      	mov	r4, r0
 8008194:	460d      	mov	r5, r1
 8008196:	f7f8 f83f 	bl	8000218 <__aeabi_dsub>
 800819a:	4642      	mov	r2, r8
 800819c:	464b      	mov	r3, r9
 800819e:	f7f8 f83b 	bl	8000218 <__aeabi_dsub>
 80081a2:	ec53 2b18 	vmov	r2, r3, d8
 80081a6:	f7f8 f837 	bl	8000218 <__aeabi_dsub>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4650      	mov	r0, sl
 80081b0:	4659      	mov	r1, fp
 80081b2:	e610      	b.n	8007dd6 <__ieee754_pow+0x31e>
 80081b4:	2401      	movs	r4, #1
 80081b6:	e6a1      	b.n	8007efc <__ieee754_pow+0x444>
 80081b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008208 <__ieee754_pow+0x750>
 80081bc:	e617      	b.n	8007dee <__ieee754_pow+0x336>
 80081be:	bf00      	nop
 80081c0:	4a454eef 	.word	0x4a454eef
 80081c4:	3fca7e28 	.word	0x3fca7e28
 80081c8:	93c9db65 	.word	0x93c9db65
 80081cc:	3fcd864a 	.word	0x3fcd864a
 80081d0:	a91d4101 	.word	0xa91d4101
 80081d4:	3fd17460 	.word	0x3fd17460
 80081d8:	518f264d 	.word	0x518f264d
 80081dc:	3fd55555 	.word	0x3fd55555
 80081e0:	db6fabff 	.word	0xdb6fabff
 80081e4:	3fdb6db6 	.word	0x3fdb6db6
 80081e8:	33333303 	.word	0x33333303
 80081ec:	3fe33333 	.word	0x3fe33333
 80081f0:	e0000000 	.word	0xe0000000
 80081f4:	3feec709 	.word	0x3feec709
 80081f8:	dc3a03fd 	.word	0xdc3a03fd
 80081fc:	3feec709 	.word	0x3feec709
 8008200:	145b01f5 	.word	0x145b01f5
 8008204:	be3e2fe0 	.word	0xbe3e2fe0
 8008208:	00000000 	.word	0x00000000
 800820c:	3ff00000 	.word	0x3ff00000
 8008210:	7ff00000 	.word	0x7ff00000
 8008214:	43400000 	.word	0x43400000
 8008218:	0003988e 	.word	0x0003988e
 800821c:	000bb679 	.word	0x000bb679
 8008220:	08008940 	.word	0x08008940
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	40080000 	.word	0x40080000
 800822c:	08008960 	.word	0x08008960
 8008230:	08008950 	.word	0x08008950
 8008234:	a3b5      	add	r3, pc, #724	; (adr r3, 800850c <__ieee754_pow+0xa54>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	4640      	mov	r0, r8
 800823c:	4649      	mov	r1, r9
 800823e:	f7f7 ffed 	bl	800021c <__adddf3>
 8008242:	4622      	mov	r2, r4
 8008244:	ec41 0b1a 	vmov	d10, r0, r1
 8008248:	462b      	mov	r3, r5
 800824a:	4630      	mov	r0, r6
 800824c:	4639      	mov	r1, r7
 800824e:	f7f7 ffe3 	bl	8000218 <__aeabi_dsub>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	ec51 0b1a 	vmov	r0, r1, d10
 800825a:	f7f8 fc25 	bl	8000aa8 <__aeabi_dcmpgt>
 800825e:	2800      	cmp	r0, #0
 8008260:	f47f ae04 	bne.w	8007e6c <__ieee754_pow+0x3b4>
 8008264:	4aa4      	ldr	r2, [pc, #656]	; (80084f8 <__ieee754_pow+0xa40>)
 8008266:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800826a:	4293      	cmp	r3, r2
 800826c:	f340 8108 	ble.w	8008480 <__ieee754_pow+0x9c8>
 8008270:	151b      	asrs	r3, r3, #20
 8008272:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008276:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800827a:	fa4a f303 	asr.w	r3, sl, r3
 800827e:	445b      	add	r3, fp
 8008280:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008284:	4e9d      	ldr	r6, [pc, #628]	; (80084fc <__ieee754_pow+0xa44>)
 8008286:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800828a:	4116      	asrs	r6, r2
 800828c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008290:	2000      	movs	r0, #0
 8008292:	ea23 0106 	bic.w	r1, r3, r6
 8008296:	f1c2 0214 	rsb	r2, r2, #20
 800829a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800829e:	fa4a fa02 	asr.w	sl, sl, r2
 80082a2:	f1bb 0f00 	cmp.w	fp, #0
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4620      	mov	r0, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	bfb8      	it	lt
 80082b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80082b4:	f7f7 ffb0 	bl	8000218 <__aeabi_dsub>
 80082b8:	ec41 0b19 	vmov	d9, r0, r1
 80082bc:	4642      	mov	r2, r8
 80082be:	464b      	mov	r3, r9
 80082c0:	ec51 0b19 	vmov	r0, r1, d9
 80082c4:	f7f7 ffaa 	bl	800021c <__adddf3>
 80082c8:	a37b      	add	r3, pc, #492	; (adr r3, 80084b8 <__ieee754_pow+0xa00>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	2000      	movs	r0, #0
 80082d0:	4604      	mov	r4, r0
 80082d2:	460d      	mov	r5, r1
 80082d4:	f7f8 f958 	bl	8000588 <__aeabi_dmul>
 80082d8:	ec53 2b19 	vmov	r2, r3, d9
 80082dc:	4606      	mov	r6, r0
 80082de:	460f      	mov	r7, r1
 80082e0:	4620      	mov	r0, r4
 80082e2:	4629      	mov	r1, r5
 80082e4:	f7f7 ff98 	bl	8000218 <__aeabi_dsub>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4640      	mov	r0, r8
 80082ee:	4649      	mov	r1, r9
 80082f0:	f7f7 ff92 	bl	8000218 <__aeabi_dsub>
 80082f4:	a372      	add	r3, pc, #456	; (adr r3, 80084c0 <__ieee754_pow+0xa08>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f8 f945 	bl	8000588 <__aeabi_dmul>
 80082fe:	a372      	add	r3, pc, #456	; (adr r3, 80084c8 <__ieee754_pow+0xa10>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	4680      	mov	r8, r0
 8008306:	4689      	mov	r9, r1
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f8 f93c 	bl	8000588 <__aeabi_dmul>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f7 ff80 	bl	800021c <__adddf3>
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	f7f7 ff78 	bl	800021c <__adddf3>
 800832c:	4632      	mov	r2, r6
 800832e:	463b      	mov	r3, r7
 8008330:	4680      	mov	r8, r0
 8008332:	4689      	mov	r9, r1
 8008334:	f7f7 ff70 	bl	8000218 <__aeabi_dsub>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f7 ff6a 	bl	8000218 <__aeabi_dsub>
 8008344:	4642      	mov	r2, r8
 8008346:	4606      	mov	r6, r0
 8008348:	460f      	mov	r7, r1
 800834a:	464b      	mov	r3, r9
 800834c:	4640      	mov	r0, r8
 800834e:	4649      	mov	r1, r9
 8008350:	f7f8 f91a 	bl	8000588 <__aeabi_dmul>
 8008354:	a35e      	add	r3, pc, #376	; (adr r3, 80084d0 <__ieee754_pow+0xa18>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	4604      	mov	r4, r0
 800835c:	460d      	mov	r5, r1
 800835e:	f7f8 f913 	bl	8000588 <__aeabi_dmul>
 8008362:	a35d      	add	r3, pc, #372	; (adr r3, 80084d8 <__ieee754_pow+0xa20>)
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f7f7 ff56 	bl	8000218 <__aeabi_dsub>
 800836c:	4622      	mov	r2, r4
 800836e:	462b      	mov	r3, r5
 8008370:	f7f8 f90a 	bl	8000588 <__aeabi_dmul>
 8008374:	a35a      	add	r3, pc, #360	; (adr r3, 80084e0 <__ieee754_pow+0xa28>)
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f7f7 ff4f 	bl	800021c <__adddf3>
 800837e:	4622      	mov	r2, r4
 8008380:	462b      	mov	r3, r5
 8008382:	f7f8 f901 	bl	8000588 <__aeabi_dmul>
 8008386:	a358      	add	r3, pc, #352	; (adr r3, 80084e8 <__ieee754_pow+0xa30>)
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f7f7 ff44 	bl	8000218 <__aeabi_dsub>
 8008390:	4622      	mov	r2, r4
 8008392:	462b      	mov	r3, r5
 8008394:	f7f8 f8f8 	bl	8000588 <__aeabi_dmul>
 8008398:	a355      	add	r3, pc, #340	; (adr r3, 80084f0 <__ieee754_pow+0xa38>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	f7f7 ff3d 	bl	800021c <__adddf3>
 80083a2:	4622      	mov	r2, r4
 80083a4:	462b      	mov	r3, r5
 80083a6:	f7f8 f8ef 	bl	8000588 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f7 ff31 	bl	8000218 <__aeabi_dsub>
 80083b6:	4604      	mov	r4, r0
 80083b8:	460d      	mov	r5, r1
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f8 f8e1 	bl	8000588 <__aeabi_dmul>
 80083c6:	2200      	movs	r2, #0
 80083c8:	ec41 0b19 	vmov	d9, r0, r1
 80083cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083d0:	4620      	mov	r0, r4
 80083d2:	4629      	mov	r1, r5
 80083d4:	f7f7 ff20 	bl	8000218 <__aeabi_dsub>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	ec51 0b19 	vmov	r0, r1, d9
 80083e0:	f7f8 f9fc 	bl	80007dc <__aeabi_ddiv>
 80083e4:	4632      	mov	r2, r6
 80083e6:	4604      	mov	r4, r0
 80083e8:	460d      	mov	r5, r1
 80083ea:	463b      	mov	r3, r7
 80083ec:	4640      	mov	r0, r8
 80083ee:	4649      	mov	r1, r9
 80083f0:	f7f8 f8ca 	bl	8000588 <__aeabi_dmul>
 80083f4:	4632      	mov	r2, r6
 80083f6:	463b      	mov	r3, r7
 80083f8:	f7f7 ff10 	bl	800021c <__adddf3>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4620      	mov	r0, r4
 8008402:	4629      	mov	r1, r5
 8008404:	f7f7 ff08 	bl	8000218 <__aeabi_dsub>
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	f7f7 ff04 	bl	8000218 <__aeabi_dsub>
 8008410:	460b      	mov	r3, r1
 8008412:	4602      	mov	r2, r0
 8008414:	493a      	ldr	r1, [pc, #232]	; (8008500 <__ieee754_pow+0xa48>)
 8008416:	2000      	movs	r0, #0
 8008418:	f7f7 fefe 	bl	8000218 <__aeabi_dsub>
 800841c:	ec41 0b10 	vmov	d0, r0, r1
 8008420:	ee10 3a90 	vmov	r3, s1
 8008424:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842c:	da2b      	bge.n	8008486 <__ieee754_pow+0x9ce>
 800842e:	4650      	mov	r0, sl
 8008430:	f000 f966 	bl	8008700 <scalbn>
 8008434:	ec51 0b10 	vmov	r0, r1, d0
 8008438:	ec53 2b18 	vmov	r2, r3, d8
 800843c:	f7ff bbed 	b.w	8007c1a <__ieee754_pow+0x162>
 8008440:	4b30      	ldr	r3, [pc, #192]	; (8008504 <__ieee754_pow+0xa4c>)
 8008442:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008446:	429e      	cmp	r6, r3
 8008448:	f77f af0c 	ble.w	8008264 <__ieee754_pow+0x7ac>
 800844c:	4b2e      	ldr	r3, [pc, #184]	; (8008508 <__ieee754_pow+0xa50>)
 800844e:	440b      	add	r3, r1
 8008450:	4303      	orrs	r3, r0
 8008452:	d009      	beq.n	8008468 <__ieee754_pow+0x9b0>
 8008454:	ec51 0b18 	vmov	r0, r1, d8
 8008458:	2200      	movs	r2, #0
 800845a:	2300      	movs	r3, #0
 800845c:	f7f8 fb06 	bl	8000a6c <__aeabi_dcmplt>
 8008460:	3800      	subs	r0, #0
 8008462:	bf18      	it	ne
 8008464:	2001      	movne	r0, #1
 8008466:	e447      	b.n	8007cf8 <__ieee754_pow+0x240>
 8008468:	4622      	mov	r2, r4
 800846a:	462b      	mov	r3, r5
 800846c:	f7f7 fed4 	bl	8000218 <__aeabi_dsub>
 8008470:	4642      	mov	r2, r8
 8008472:	464b      	mov	r3, r9
 8008474:	f7f8 fb0e 	bl	8000a94 <__aeabi_dcmpge>
 8008478:	2800      	cmp	r0, #0
 800847a:	f43f aef3 	beq.w	8008264 <__ieee754_pow+0x7ac>
 800847e:	e7e9      	b.n	8008454 <__ieee754_pow+0x99c>
 8008480:	f04f 0a00 	mov.w	sl, #0
 8008484:	e71a      	b.n	80082bc <__ieee754_pow+0x804>
 8008486:	ec51 0b10 	vmov	r0, r1, d0
 800848a:	4619      	mov	r1, r3
 800848c:	e7d4      	b.n	8008438 <__ieee754_pow+0x980>
 800848e:	491c      	ldr	r1, [pc, #112]	; (8008500 <__ieee754_pow+0xa48>)
 8008490:	2000      	movs	r0, #0
 8008492:	f7ff bb30 	b.w	8007af6 <__ieee754_pow+0x3e>
 8008496:	2000      	movs	r0, #0
 8008498:	2100      	movs	r1, #0
 800849a:	f7ff bb2c 	b.w	8007af6 <__ieee754_pow+0x3e>
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7ff bb28 	b.w	8007af6 <__ieee754_pow+0x3e>
 80084a6:	9204      	str	r2, [sp, #16]
 80084a8:	f7ff bb7a 	b.w	8007ba0 <__ieee754_pow+0xe8>
 80084ac:	2300      	movs	r3, #0
 80084ae:	f7ff bb64 	b.w	8007b7a <__ieee754_pow+0xc2>
 80084b2:	bf00      	nop
 80084b4:	f3af 8000 	nop.w
 80084b8:	00000000 	.word	0x00000000
 80084bc:	3fe62e43 	.word	0x3fe62e43
 80084c0:	fefa39ef 	.word	0xfefa39ef
 80084c4:	3fe62e42 	.word	0x3fe62e42
 80084c8:	0ca86c39 	.word	0x0ca86c39
 80084cc:	be205c61 	.word	0xbe205c61
 80084d0:	72bea4d0 	.word	0x72bea4d0
 80084d4:	3e663769 	.word	0x3e663769
 80084d8:	c5d26bf1 	.word	0xc5d26bf1
 80084dc:	3ebbbd41 	.word	0x3ebbbd41
 80084e0:	af25de2c 	.word	0xaf25de2c
 80084e4:	3f11566a 	.word	0x3f11566a
 80084e8:	16bebd93 	.word	0x16bebd93
 80084ec:	3f66c16c 	.word	0x3f66c16c
 80084f0:	5555553e 	.word	0x5555553e
 80084f4:	3fc55555 	.word	0x3fc55555
 80084f8:	3fe00000 	.word	0x3fe00000
 80084fc:	000fffff 	.word	0x000fffff
 8008500:	3ff00000 	.word	0x3ff00000
 8008504:	4090cbff 	.word	0x4090cbff
 8008508:	3f6f3400 	.word	0x3f6f3400
 800850c:	652b82fe 	.word	0x652b82fe
 8008510:	3c971547 	.word	0x3c971547

08008514 <__ieee754_sqrt>:
 8008514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008518:	ec55 4b10 	vmov	r4, r5, d0
 800851c:	4e55      	ldr	r6, [pc, #340]	; (8008674 <__ieee754_sqrt+0x160>)
 800851e:	43ae      	bics	r6, r5
 8008520:	ee10 0a10 	vmov	r0, s0
 8008524:	ee10 3a10 	vmov	r3, s0
 8008528:	462a      	mov	r2, r5
 800852a:	4629      	mov	r1, r5
 800852c:	d110      	bne.n	8008550 <__ieee754_sqrt+0x3c>
 800852e:	ee10 2a10 	vmov	r2, s0
 8008532:	462b      	mov	r3, r5
 8008534:	f7f8 f828 	bl	8000588 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4620      	mov	r0, r4
 800853e:	4629      	mov	r1, r5
 8008540:	f7f7 fe6c 	bl	800021c <__adddf3>
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	ec45 4b10 	vmov	d0, r4, r5
 800854c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008550:	2d00      	cmp	r5, #0
 8008552:	dc10      	bgt.n	8008576 <__ieee754_sqrt+0x62>
 8008554:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008558:	4330      	orrs	r0, r6
 800855a:	d0f5      	beq.n	8008548 <__ieee754_sqrt+0x34>
 800855c:	b15d      	cbz	r5, 8008576 <__ieee754_sqrt+0x62>
 800855e:	ee10 2a10 	vmov	r2, s0
 8008562:	462b      	mov	r3, r5
 8008564:	ee10 0a10 	vmov	r0, s0
 8008568:	f7f7 fe56 	bl	8000218 <__aeabi_dsub>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	f7f8 f934 	bl	80007dc <__aeabi_ddiv>
 8008574:	e7e6      	b.n	8008544 <__ieee754_sqrt+0x30>
 8008576:	1512      	asrs	r2, r2, #20
 8008578:	d074      	beq.n	8008664 <__ieee754_sqrt+0x150>
 800857a:	07d4      	lsls	r4, r2, #31
 800857c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008580:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008588:	bf5e      	ittt	pl
 800858a:	0fda      	lsrpl	r2, r3, #31
 800858c:	005b      	lslpl	r3, r3, #1
 800858e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008592:	2400      	movs	r4, #0
 8008594:	0fda      	lsrs	r2, r3, #31
 8008596:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800859a:	107f      	asrs	r7, r7, #1
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	2516      	movs	r5, #22
 80085a0:	4620      	mov	r0, r4
 80085a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80085a6:	1886      	adds	r6, r0, r2
 80085a8:	428e      	cmp	r6, r1
 80085aa:	bfde      	ittt	le
 80085ac:	1b89      	suble	r1, r1, r6
 80085ae:	18b0      	addle	r0, r6, r2
 80085b0:	18a4      	addle	r4, r4, r2
 80085b2:	0049      	lsls	r1, r1, #1
 80085b4:	3d01      	subs	r5, #1
 80085b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80085ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80085be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085c2:	d1f0      	bne.n	80085a6 <__ieee754_sqrt+0x92>
 80085c4:	462a      	mov	r2, r5
 80085c6:	f04f 0e20 	mov.w	lr, #32
 80085ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80085ce:	4281      	cmp	r1, r0
 80085d0:	eb06 0c05 	add.w	ip, r6, r5
 80085d4:	dc02      	bgt.n	80085dc <__ieee754_sqrt+0xc8>
 80085d6:	d113      	bne.n	8008600 <__ieee754_sqrt+0xec>
 80085d8:	459c      	cmp	ip, r3
 80085da:	d811      	bhi.n	8008600 <__ieee754_sqrt+0xec>
 80085dc:	f1bc 0f00 	cmp.w	ip, #0
 80085e0:	eb0c 0506 	add.w	r5, ip, r6
 80085e4:	da43      	bge.n	800866e <__ieee754_sqrt+0x15a>
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	db41      	blt.n	800866e <__ieee754_sqrt+0x15a>
 80085ea:	f100 0801 	add.w	r8, r0, #1
 80085ee:	1a09      	subs	r1, r1, r0
 80085f0:	459c      	cmp	ip, r3
 80085f2:	bf88      	it	hi
 80085f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80085f8:	eba3 030c 	sub.w	r3, r3, ip
 80085fc:	4432      	add	r2, r6
 80085fe:	4640      	mov	r0, r8
 8008600:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008604:	f1be 0e01 	subs.w	lr, lr, #1
 8008608:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800860c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008610:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008614:	d1db      	bne.n	80085ce <__ieee754_sqrt+0xba>
 8008616:	430b      	orrs	r3, r1
 8008618:	d006      	beq.n	8008628 <__ieee754_sqrt+0x114>
 800861a:	1c50      	adds	r0, r2, #1
 800861c:	bf13      	iteet	ne
 800861e:	3201      	addne	r2, #1
 8008620:	3401      	addeq	r4, #1
 8008622:	4672      	moveq	r2, lr
 8008624:	f022 0201 	bicne.w	r2, r2, #1
 8008628:	1063      	asrs	r3, r4, #1
 800862a:	0852      	lsrs	r2, r2, #1
 800862c:	07e1      	lsls	r1, r4, #31
 800862e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008632:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008636:	bf48      	it	mi
 8008638:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800863c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008640:	4614      	mov	r4, r2
 8008642:	e781      	b.n	8008548 <__ieee754_sqrt+0x34>
 8008644:	0ad9      	lsrs	r1, r3, #11
 8008646:	3815      	subs	r0, #21
 8008648:	055b      	lsls	r3, r3, #21
 800864a:	2900      	cmp	r1, #0
 800864c:	d0fa      	beq.n	8008644 <__ieee754_sqrt+0x130>
 800864e:	02cd      	lsls	r5, r1, #11
 8008650:	d50a      	bpl.n	8008668 <__ieee754_sqrt+0x154>
 8008652:	f1c2 0420 	rsb	r4, r2, #32
 8008656:	fa23 f404 	lsr.w	r4, r3, r4
 800865a:	1e55      	subs	r5, r2, #1
 800865c:	4093      	lsls	r3, r2
 800865e:	4321      	orrs	r1, r4
 8008660:	1b42      	subs	r2, r0, r5
 8008662:	e78a      	b.n	800857a <__ieee754_sqrt+0x66>
 8008664:	4610      	mov	r0, r2
 8008666:	e7f0      	b.n	800864a <__ieee754_sqrt+0x136>
 8008668:	0049      	lsls	r1, r1, #1
 800866a:	3201      	adds	r2, #1
 800866c:	e7ef      	b.n	800864e <__ieee754_sqrt+0x13a>
 800866e:	4680      	mov	r8, r0
 8008670:	e7bd      	b.n	80085ee <__ieee754_sqrt+0xda>
 8008672:	bf00      	nop
 8008674:	7ff00000 	.word	0x7ff00000

08008678 <with_errno>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	4604      	mov	r4, r0
 800867c:	460d      	mov	r5, r1
 800867e:	4616      	mov	r6, r2
 8008680:	f7ff f8a4 	bl	80077cc <__errno>
 8008684:	4629      	mov	r1, r5
 8008686:	6006      	str	r6, [r0, #0]
 8008688:	4620      	mov	r0, r4
 800868a:	bd70      	pop	{r4, r5, r6, pc}

0800868c <xflow>:
 800868c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800868e:	4614      	mov	r4, r2
 8008690:	461d      	mov	r5, r3
 8008692:	b108      	cbz	r0, 8008698 <xflow+0xc>
 8008694:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008698:	e9cd 2300 	strd	r2, r3, [sp]
 800869c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086a0:	4620      	mov	r0, r4
 80086a2:	4629      	mov	r1, r5
 80086a4:	f7f7 ff70 	bl	8000588 <__aeabi_dmul>
 80086a8:	2222      	movs	r2, #34	; 0x22
 80086aa:	b003      	add	sp, #12
 80086ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086b0:	f7ff bfe2 	b.w	8008678 <with_errno>

080086b4 <__math_uflow>:
 80086b4:	b508      	push	{r3, lr}
 80086b6:	2200      	movs	r2, #0
 80086b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086bc:	f7ff ffe6 	bl	800868c <xflow>
 80086c0:	ec41 0b10 	vmov	d0, r0, r1
 80086c4:	bd08      	pop	{r3, pc}

080086c6 <__math_oflow>:
 80086c6:	b508      	push	{r3, lr}
 80086c8:	2200      	movs	r2, #0
 80086ca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80086ce:	f7ff ffdd 	bl	800868c <xflow>
 80086d2:	ec41 0b10 	vmov	d0, r0, r1
 80086d6:	bd08      	pop	{r3, pc}

080086d8 <fabs>:
 80086d8:	ec51 0b10 	vmov	r0, r1, d0
 80086dc:	ee10 2a10 	vmov	r2, s0
 80086e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086e4:	ec43 2b10 	vmov	d0, r2, r3
 80086e8:	4770      	bx	lr

080086ea <finite>:
 80086ea:	b082      	sub	sp, #8
 80086ec:	ed8d 0b00 	vstr	d0, [sp]
 80086f0:	9801      	ldr	r0, [sp, #4]
 80086f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80086f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80086fa:	0fc0      	lsrs	r0, r0, #31
 80086fc:	b002      	add	sp, #8
 80086fe:	4770      	bx	lr

08008700 <scalbn>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	ec55 4b10 	vmov	r4, r5, d0
 8008706:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800870a:	4606      	mov	r6, r0
 800870c:	462b      	mov	r3, r5
 800870e:	b99a      	cbnz	r2, 8008738 <scalbn+0x38>
 8008710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008714:	4323      	orrs	r3, r4
 8008716:	d036      	beq.n	8008786 <scalbn+0x86>
 8008718:	4b39      	ldr	r3, [pc, #228]	; (8008800 <scalbn+0x100>)
 800871a:	4629      	mov	r1, r5
 800871c:	ee10 0a10 	vmov	r0, s0
 8008720:	2200      	movs	r2, #0
 8008722:	f7f7 ff31 	bl	8000588 <__aeabi_dmul>
 8008726:	4b37      	ldr	r3, [pc, #220]	; (8008804 <scalbn+0x104>)
 8008728:	429e      	cmp	r6, r3
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	da10      	bge.n	8008752 <scalbn+0x52>
 8008730:	a32b      	add	r3, pc, #172	; (adr r3, 80087e0 <scalbn+0xe0>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	e03a      	b.n	80087ae <scalbn+0xae>
 8008738:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800873c:	428a      	cmp	r2, r1
 800873e:	d10c      	bne.n	800875a <scalbn+0x5a>
 8008740:	ee10 2a10 	vmov	r2, s0
 8008744:	4620      	mov	r0, r4
 8008746:	4629      	mov	r1, r5
 8008748:	f7f7 fd68 	bl	800021c <__adddf3>
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	e019      	b.n	8008786 <scalbn+0x86>
 8008752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008756:	460b      	mov	r3, r1
 8008758:	3a36      	subs	r2, #54	; 0x36
 800875a:	4432      	add	r2, r6
 800875c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008760:	428a      	cmp	r2, r1
 8008762:	dd08      	ble.n	8008776 <scalbn+0x76>
 8008764:	2d00      	cmp	r5, #0
 8008766:	a120      	add	r1, pc, #128	; (adr r1, 80087e8 <scalbn+0xe8>)
 8008768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800876c:	da1c      	bge.n	80087a8 <scalbn+0xa8>
 800876e:	a120      	add	r1, pc, #128	; (adr r1, 80087f0 <scalbn+0xf0>)
 8008770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008774:	e018      	b.n	80087a8 <scalbn+0xa8>
 8008776:	2a00      	cmp	r2, #0
 8008778:	dd08      	ble.n	800878c <scalbn+0x8c>
 800877a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800877e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008782:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008786:	ec45 4b10 	vmov	d0, r4, r5
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008790:	da19      	bge.n	80087c6 <scalbn+0xc6>
 8008792:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008796:	429e      	cmp	r6, r3
 8008798:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800879c:	dd0a      	ble.n	80087b4 <scalbn+0xb4>
 800879e:	a112      	add	r1, pc, #72	; (adr r1, 80087e8 <scalbn+0xe8>)
 80087a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e2      	bne.n	800876e <scalbn+0x6e>
 80087a8:	a30f      	add	r3, pc, #60	; (adr r3, 80087e8 <scalbn+0xe8>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 feeb 	bl	8000588 <__aeabi_dmul>
 80087b2:	e7cb      	b.n	800874c <scalbn+0x4c>
 80087b4:	a10a      	add	r1, pc, #40	; (adr r1, 80087e0 <scalbn+0xe0>)
 80087b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0b8      	beq.n	8008730 <scalbn+0x30>
 80087be:	a10e      	add	r1, pc, #56	; (adr r1, 80087f8 <scalbn+0xf8>)
 80087c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c4:	e7b4      	b.n	8008730 <scalbn+0x30>
 80087c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087ca:	3236      	adds	r2, #54	; 0x36
 80087cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80087d4:	4620      	mov	r0, r4
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <scalbn+0x108>)
 80087d8:	2200      	movs	r2, #0
 80087da:	e7e8      	b.n	80087ae <scalbn+0xae>
 80087dc:	f3af 8000 	nop.w
 80087e0:	c2f8f359 	.word	0xc2f8f359
 80087e4:	01a56e1f 	.word	0x01a56e1f
 80087e8:	8800759c 	.word	0x8800759c
 80087ec:	7e37e43c 	.word	0x7e37e43c
 80087f0:	8800759c 	.word	0x8800759c
 80087f4:	fe37e43c 	.word	0xfe37e43c
 80087f8:	c2f8f359 	.word	0xc2f8f359
 80087fc:	81a56e1f 	.word	0x81a56e1f
 8008800:	43500000 	.word	0x43500000
 8008804:	ffff3cb0 	.word	0xffff3cb0
 8008808:	3c900000 	.word	0x3c900000

0800880c <_init>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr

08008818 <_fini>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr
